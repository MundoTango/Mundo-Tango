╔═══════════════════════════════════════════════════════════════════╗
║                                                                   ║
║         COMPLETE PAGE LAYOUT REPORT - MUNDO TANGO PLATFORM        ║
║    All 82+ Pages with Agent Assignments & MT Ocean Theme         ║
║    Marketing · HR · Talent Match · H2AC · Automations            ║
║                                                                   ║
╚═══════════════════════════════════════════════════════════════════╝

VERSION: 2.0 (Expanded)
GENERATED: October 31, 2025
METHOD: MB.MD (Simultaneously, Recursively, Critically)
PURPOSE: Complete recreation guide for all platform pages with layouts
SCOPE: Marketing site, Authenticated app, Admin panel, Life CEO, Talent Match - 82+ pages
ADDITIONS: Global topbar, Mr Blue AI, Visual Editor, Life CEO agents, Marketing/HR agents, 
           H2AC framework, Complete automation workflows, Talent Match AI

=======================================================================
📋 TABLE OF CONTENTS
=======================================================================

PART 1: OVERVIEW & THEME SYSTEM
  1.1 Page Categories & Count
  1.2 MT Ocean Theme Quick Reference
  1.3 Agent Assignment System
  1.4 Layout Architecture Patterns

PART 2: PUBLIC/MARKETING PAGES (P1-P9)
  2.1 Login Page (P1)
  2.2 Register Page (P2)
  2.3 Forgot Password Page (P3)
  2.4 Reset Password Page (P4)
  2.5 Landing Page (P6)
  2.6 About Page (P7)
  2.7 Pricing Page (P8)
  2.8 Contact Page (P9)

PART 3: AUTHENTICATED APP PAGES (P10-P29)
  3.1 Home Feed (P10) ⭐
  3.2 Profile Page (P15) ⭐
  3.3 Edit Profile (P16)
  3.4 Messages Page (P18) ⭐
  3.5 Events Page (P20) ⭐
  3.6 Event Detail (P21)
  3.7 Communities Page (P19)
  3.8 Community Detail (P23)
  3.9 Settings Page (P14)
  3.10 Notifications (P13)
  3.11 Search Results (P12)
  3.12 Friends List (P17)
  3.13 Housing Listings (P25)
  3.14 Map View (P27)
  3.15 Calendar View (P28)
  3.16 Subscription (P29)

PART 4: ADMIN PANEL PAGES (P30-P45)
  4.1 Admin Dashboard (P30) ⭐
  4.2 User Management (P31)
  4.3 Analytics (P32)
  4.4 Projects Tracker (P34) ⭐
  4.5 ESA Mind (P35) ⭐
  4.6 Visual Editor (P37) ⭐
  4.7 Content Moderation (P33)
  4.8 System Logs (P36)
  4.9 Role Management (P39)
  4.10 Performance Monitor (P43)
  4.11 Security Dashboard (P44)
  4.12 Audit Logs (P45)

PART 5: UTILITY & ERROR PAGES (P46-P50)
  5.1 404 Not Found (P46)
  5.2 500 Server Error (P47)
  5.3 Offline Page (P48)
  5.4 Maintenance (P49)
  5.5 Terms of Service (P50)

PART 6: THEME CUSTOMIZATION GUIDE
  6.1 Design Token Architecture
  6.2 How to Change Colors/Theme
  6.3 Component Theming System

PART 7: EXPANDED PAGES & CRITICAL COMPONENTS
  7.1 Global Navigation Topbar (E100-E107)
  7.2 Mr Blue AI - Dedicated Chat Interface (P60)
  7.3 Visual Editor - Page Builder (P37)

PART 8: LIFE CEO AGENT PAGES (16 AGENTS)
  8.1 Life CEO Dashboard (P65)
  8.2 Individual Agent Page Layout (P66-P81)

PART 9: ADDITIONAL PAGES
  9.1 Complete Page Count Update (82+ pages)
  9.2 Housing Marketplace (P25-P26)
  9.3 Map View (P27)

PART 10: SUMMARY & INDEX

PART 11: MARKETING & HR AGENT SYSTEMS
  11.1 Marketing Agents (M1-M5)
  11.2 HR & Talent Agents (H1-H5)

PART 12: MARKETING PAGE - MUNDO TANGO PLATFORM (P7)
  12.1 Marketing Page Layout (7 Sections)

PART 13: TALENT MATCH AI / RESUME AI SYSTEM (P82)
  13.1 Talent Match - AI-Powered Volunteer Matching
  13.2 Signal Detection & Task Matching Algorithms

PART 14: H2AC - HUMAN-TO-AGENT COMMUNICATION
  14.1 H2AC System Overview
  14.2 Architecture & Communication Patterns
  14.3 Conversation Examples

PART 15: COMPLETE AUTOMATION WORKFLOWS (IN-HOUSE SYSTEM)
  15.1 Automation System Architecture (BullMQ + Workers)
  15.2 All 20+ Documented Automation Workflows
  15.3 Workflow Implementation Examples

PART 16: CITY COMMUNITY DESIGN SYSTEM
  16.1 City Cover Page Design - Cityscape Photography
  16.2 City Community Auto-Creation Logic

PART 17: POST CREATION AUTOMATION (WITH AUTO-CITY CREATION)
  17.1 Post Creation with Location-Based Auto-City Detection

PART 18: PLATFORM ALGORITHMS (A1-A50)
  18.1 Algorithm Overview
  18.2 Critical Algorithms (A1, A2, A3, A12, A25, A28, A35)
  18.3 Complete Algorithm Index (50 algorithms)
  18.4 Algorithm Implementation Example (Talent Match Signal Detection)

PART 19: COMPLETE IMPLEMENTATION GUIDE - 0 TO DEPLOYMENT ⭐⭐⭐
  19.1 Overview: Build Strategy (3-Phase, 7-Day Plan)
  19.2 Prerequisites - Before You Start
  19.3 Phase 1: Foundation (Days 1-2)
       • Environment setup
       • Database schema (50+ tables)
       • Core API routes
       • Frontend foundation
  19.4 Phase 2: Features (Days 3-5)
       • Day 3: Social features (posts, communities, events, messaging)
       • Day 4: AI & advanced (Mr Blue, Visual Editor, Life CEO)
       • Day 5: Automations & polish
  19.5 Phase 3: Polish & Deploy (Days 6-7)
       • Day 6: Testing & optimization
       • Day 7: Production deployment (Vercel + Railway)
  19.6 Implementation Tips - MB.MD Methodology
  19.7 Reference Documents by Task
  19.8 Troubleshooting Common Issues

=======================================================================
PART 1: OVERVIEW & THEME SYSTEM
=======================================================================

## 1.1 PAGE CATEGORIES & COUNT

**Total Pages: 50+**

PUBLIC PAGES (No auth): 9 pages
├── Authentication (P1-P5): Login, Register, Forgot/Reset Password
└── Marketing (P6-P9): Landing, About, Pricing, Contact

AUTHENTICATED PAGES (Logged in): 20 pages
├── Core Features (P10-P14): Feed, Profile, Messages, Settings
├── Social (P15-P20): Events, Communities, Friends
└── Advanced (P21-P29): Event/Community details, Housing, Maps, Calendar

ADMIN PAGES (Admin/Super Admin): 16 pages
├── Management (P30-P33): Dashboard, Users, Analytics, Moderation
├── ESA Framework (P34-P37): Projects, ESA Mind, Visual Editor, Logs
└── System (P38-P45): Roles, API Keys, Security, Audit

UTILITY PAGES (Error handling): 5 pages
└── Error Pages (P46-P50): 404, 500, Offline, Maintenance, Terms

---

## 1.2 MT OCEAN THEME QUICK REFERENCE

### Color Palette (Turquoise → Deep Blue)

```css
/* PRIMARY COLORS */
--ocean-seafoam-400: hsl(177, 72%, 56%);  /* #40E0D0 Turquoise - Primary */
--ocean-cyan-400: hsl(210, 100%, 56%);    /* #1E90FF Dodger Blue */
--ocean-teal-500: hsl(218, 100%, 34%);    /* #0047AB Cobalt Blue */
--ocean-teal-900: hsl(218, 100%, 10%);    /* #001333 Navy */

/* SEMANTIC TOKENS */
--color-primary: var(--ocean-seafoam-400);
--color-primary-hover: var(--ocean-seafoam-500);
--bg-ocean-gradient: linear-gradient(180deg, 
  var(--ocean-teal-500) 0%, 
  var(--ocean-teal-700) 50%, 
  var(--ocean-teal-800) 100%);

/* GLASSMORPHISM */
--glass-bg: hsl(195 60% 92% / 0.9);        /* Light mode */
--glass-bg-dark: hsla(215, 52%, 18%, 0.85); /* Dark mode */
--glass-blur: 18px;
--glass-border: hsl(186 72% 42% / 0.2);
--glass-shadow: 0 18px 45px 0 hsl(214 80% 6% / 0.08);
```

### Spacing System (4px base)

```css
--space-1: 0.25rem;  /* 4px */
--space-2: 0.5rem;   /* 8px */
--space-4: 1rem;     /* 16px */
--space-6: 1.5rem;   /* 24px */
--space-8: 2rem;     /* 32px */
--space-12: 3rem;    /* 48px */
```

### Typography Scale

```css
--text-sm: 0.875rem;   /* 14px */
--text-base: 1rem;     /* 16px */
--text-lg: 1.125rem;   /* 18px */
--text-xl: 1.25rem;    /* 20px */
--text-2xl: 1.5rem;    /* 24px */
--text-3xl: 1.875rem;  /* 30px */
--text-4xl: 2.25rem;   /* 36px */
```

---

## 1.3 AGENT ASSIGNMENT SYSTEM

### Agent Types by Responsibility

**PAGE AGENTS (P1-P50):**
- One per page
- Manages page functionality, UX, data flow
- Coordinates with component/feature agents

**COMPONENT AGENTS (E1-E500+):**
- One per interactive element
- Handles component logic, state, events
- Named: E[number]-[Page]-[Component]
- Example: E23-Feed-CreatePost

**FEATURE AGENTS (F1-F100):**
- Cross-page features (search, notifications, AI)
- Shared functionality
- Example: F10-Search, F15-Notifications

**BACKEND AGENTS (B1-B50):**
- API route handlers
- Database operations
- Business logic
- Example: B10-PostsAPI, B20-EventsAPI

**AI AGENTS (A1-A80):**
- Mr Blue AI (#73-80)
- ML algorithms (#66-72)
- Pattern learning (#68)

---

## 1.4 LAYOUT ARCHITECTURE PATTERNS

### Pattern A: Full-Width Single Column
```
Used for: Login, Register, Landing, Error pages
┌─────────────────────────────────────┐
│         HEADER/LOGO (centered)      │
├─────────────────────────────────────┤
│                                     │
│        MAIN CONTENT (centered)      │
│          Max-width: 480px           │
│                                     │
└─────────────────────────────────────┘
```

### Pattern B: Three-Column Layout (Mundo Tango)
```
Used for: Feed, Profile, Events, Communities
┌────────┬──────────────────┬─────────┐
│  LEFT  │   MAIN CONTENT   │  RIGHT  │
│ SIDEBAR│    (scrollable)  │ SIDEBAR │
│ 280px  │   flex-1         │  320px  │
│        │                  │         │
│ User   │  Feed Posts      │ Events  │
│ Profile│  or              │ Widget  │
│ Links  │  Event List      │ Online  │
│ Lang   │  etc.            │ Users   │
└────────┴──────────────────┴─────────┘
```

### Pattern C: Two-Column Split
```
Used for: Messages, Admin Dashboard
┌──────────────┬──────────────────────┐
│  LIST/NAV    │   DETAIL/CONTENT     │
│  320px       │   flex-1             │
│              │                      │
│ Conversations│   Chat Window        │
│ or           │   or                 │
│ Menu Items   │   Dashboard Cards    │
└──────────────┴──────────────────────┘
```

### Pattern D: Full-Width Dashboard
```
Used for: Admin Analytics, ESA Mind, Visual Editor
┌─────────────────────────────────────┐
│  TOPBAR (breadcrumb, actions)       │
├─────────────────────────────────────┤
│                                     │
│  GRID OF CARDS/WIDGETS              │
│  (responsive: 1-4 columns)          │
│                                     │
└─────────────────────────────────────┘
```

=======================================================================
PART 2: PUBLIC/MARKETING PAGES (P1-P9)
=======================================================================

## 2.1 LOGIN PAGE (P1)

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: Login                                                       ║
║ ROUTE: /login                                                     ║
║ AUTH: Public (redirects if logged in)                            ║
║ LAYOUT: Pattern A (Full-Width Single Column)                     ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Page Agent:**
- P1 (Login Page Agent)
  - Form validation (email, password)
  - 2FA token handling
  - API communication (/api/auth/login)
  - Token storage management
  - Error message display
  - Redirect on success

**Component Agents:**
- E1-Login-EmailInput (Email field validation)
- E2-Login-PasswordInput (Password field with show/hide)
- E3-Login-2FAInput (TOTP token input - conditional)
- E4-Login-SubmitButton (Submit with loading state)
- E5-Login-ForgotLink (Navigate to /forgot-password)
- E6-Login-RegisterLink (Navigate to /register)

**Backend Agents:**
- B1-AuthAPI (POST /api/auth/login)
- B2-SessionManager (JWT token generation)

**Feature Agents:**
- F1-RateLimiter (5 attempts per 15 min)

---

### PAGE LAYOUT (MT OCEAN THEME)

```
┌─────────────────────────────────────────────────────┐
│                                                     │
│                   [MT LOGO]                         │
│              Mundo Tango Platform                   │
│                                                     │
│  ┌─────────────────────────────────────────────┐   │
│  │  GLASSMORPHIC CARD (--glass-bg, --glass-blur)  │
│  │  padding: --space-8 (32px)                  │   │
│  │  border-radius: --radius-2xl (16px)         │   │
│  │  backdrop-filter: blur(18px)                │   │
│  │                                             │   │
│  │  Welcome Back                               │   │
│  │  (--text-2xl, --font-weight-semibold)      │   │
│  │                                             │   │
│  │  ┌─────────────────────────────────────┐   │   │
│  │  │ Email                               │   │   │
│  │  │ [___________________________]       │   │   │
│  │  │ (E1-Login-EmailInput)              │   │   │
│  │  └─────────────────────────────────────┘   │   │
│  │                                             │   │
│  │  ┌─────────────────────────────────────┐   │   │
│  │  │ Password                     [👁]   │   │   │
│  │  │ [___________________________]       │   │   │
│  │  │ (E2-Login-PasswordInput)           │   │   │
│  │  └─────────────────────────────────────┘   │   │
│  │                                             │   │
│  │  [IF 2FA REQUIRED]                         │   │
│  │  ┌─────────────────────────────────────┐   │   │
│  │  │ 2FA Code                            │   │   │
│  │  │ [___ ___ ___ ___ ___ ___]          │   │   │
│  │  │ (E3-Login-2FAInput)                │   │   │
│  │  └─────────────────────────────────────┘   │   │
│  │                                             │   │
│  │  ┌─────────────────────────────────────┐   │   │
│  │  │     [LOG IN]                        │   │   │
│  │  │  (E4-Login-SubmitButton)           │   │   │
│  │  │  bg: --color-primary               │   │   │
│  │  │  hover: --color-primary-hover      │   │   │
│  │  │  padding: --space-3 --space-6      │   │   │
│  │  └─────────────────────────────────────┘   │   │
│  │                                             │   │
│  │  Forgot password? (E5-Login-ForgotLink)   │   │
│  │  color: --color-primary                    │   │
│  │                                             │   │
│  └─────────────────────────────────────────────┘   │
│                                                     │
│  Don't have an account?                             │
│  [Sign up] (E6-Login-RegisterLink)                 │
│  color: --color-primary                             │
│                                                     │
└─────────────────────────────────────────────────────┘
```

### COMPONENT SPECIFICATIONS

**Glassmorphic Card:**
```css
.login-card {
  background: var(--glass-bg);
  backdrop-filter: blur(var(--glass-blur));
  border: 1px solid var(--glass-border);
  border-radius: var(--radius-2xl);
  padding: var(--space-8);
  box-shadow: var(--glass-shadow);
  max-width: 480px;
  margin: 0 auto;
}

.dark .login-card {
  background: var(--glass-bg-dark);
  border-color: hsla(186, 72%, 60%, 0.25);
}
```

**Primary Button:**
```css
.btn-primary {
  background: var(--color-primary);
  color: white;
  padding: var(--space-3) var(--space-6);
  border-radius: var(--radius-lg);
  font-weight: var(--font-weight-semibold);
  transition: var(--transition-base);
  width: 100%;
}

.btn-primary:hover {
  background: var(--color-primary-hover);
  box-shadow: var(--glow-seafoam);
}
```

**Input Fields:**
```css
.input-field {
  background: white;
  border: 1px solid var(--glass-border);
  border-radius: var(--radius-lg);
  padding: var(--space-3);
  font-size: var(--text-base);
  width: 100%;
}

.dark .input-field {
  background: hsla(218, 70%, 15%, 0.8);
  border-color: hsla(186, 72%, 60%, 0.2);
  color: var(--text-ocean-primary);
}

.input-field:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px hsla(177, 72%, 56%, 0.1);
}
```

---

### DATA FLOW

```
User enters credentials → E1-Login-EmailInput, E2-Login-PasswordInput
          ↓
Client-side validation (P1)
          ↓
POST /api/auth/login (B1-AuthAPI)
          ↓
Server: Verify password (bcrypt)
          ↓
Server: Check 2FA enabled?
   ├─ Yes → Return { requires2FA: true }
   │         Show E3-Login-2FAInput
   │         User enters token → Verify TOTP
   └─ No → Generate JWT (B2-SessionManager)
          ↓
Client: Store token in localStorage
          ↓
Redirect to /feed (P10)
```

---

### RESPONSIVE BEHAVIOR

**Desktop (>1024px):**
- Card max-width: 480px, centered
- Font sizes: as specified
- Full glassmorphic effects

**Tablet (768-1024px):**
- Card max-width: 90%, centered
- Slightly reduced padding (--space-6)

**Mobile (<768px):**
- Card width: 100%, no side margins
- Padding: --space-4
- Font sizes: scale down slightly
- Stack all elements vertically

---

## 2.2 REGISTER PAGE (P2)

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: Register                                                    ║
║ ROUTE: /register                                                  ║
║ AUTH: Public (redirects if logged in)                            ║
║ LAYOUT: Pattern A (Full-Width Single Column)                     ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Page Agent:**
- P2 (Register Page Agent)
  - Multi-field form validation
  - Password strength checking
  - Email uniqueness verification
  - Username availability check
  - Terms acceptance tracking
  - Welcome email trigger
  - Auto-login after registration

**Component Agents:**
- E7-Register-EmailInput
- E8-Register-UsernameInput
- E9-Register-PasswordInput
- E10-Register-ConfirmPasswordInput
- E11-Register-NameInput
- E12-Register-CitySelect (optional)
- E13-Register-CountrySelect (optional)
- E14-Register-TermsCheckbox
- E15-Register-SubmitButton

**Backend Agents:**
- B1-AuthAPI (POST /api/auth/register)

---

### PAGE LAYOUT (MT OCEAN THEME)

```
┌─────────────────────────────────────────────────────┐
│                   [MT LOGO]                         │
│              Create Your Account                    │
│                                                     │
│  ┌─────────────────────────────────────────────┐   │
│  │  GLASSMORPHIC CARD                          │   │
│  │  (same styling as Login)                   │   │
│  │                                             │   │
│  │  Join Mundo Tango                           │   │
│  │  (--text-2xl)                              │   │
│  │                                             │   │
│  │  ┌───────────────────────────────────┐     │   │
│  │  │ Email (E7-Register-EmailInput)    │     │   │
│  │  │ [_________________________]       │     │   │
│  │  └───────────────────────────────────┘     │   │
│  │                                             │   │
│  │  ┌───────────────────────────────────┐     │   │
│  │  │ Username (E8-Register-Username)   │     │   │
│  │  │ [_________________________]       │     │   │
│  │  │ ✓ Available / ✗ Taken            │     │   │
│  │  └───────────────────────────────────┘     │   │
│  │                                             │   │
│  │  ┌───────────────────────────────────┐     │   │
│  │  │ Full Name (E11-Register-Name)     │     │   │
│  │  │ [_________________________]       │     │   │
│  │  └───────────────────────────────────┘     │   │
│  │                                             │   │
│  │  ┌───────────────────────────────────┐     │   │
│  │  │ Password (E9-Register-Password)   │     │   │
│  │  │ [_________________________] [👁]  │     │   │
│  │  │ Strength: [▓▓▓▓░░] Medium        │     │   │
│  │  └───────────────────────────────────┘     │   │
│  │                                             │   │
│  │  ┌───────────────────────────────────┐     │   │
│  │  │ Confirm Password                  │     │   │
│  │  │ (E10-Register-ConfirmPassword)   │     │   │
│  │  │ [_________________________]       │     │   │
│  │  └───────────────────────────────────┘     │   │
│  │                                             │   │
│  │  Optional (for community features):        │   │
│  │  ┌────────────┬──────────────────┐         │   │
│  │  │ City       │ Country          │         │   │
│  │  │ [v Buenos] │ [v Argentina]    │         │   │
│  │  │ (E12)      │ (E13)            │         │   │
│  │  └────────────┴──────────────────┘         │   │
│  │                                             │   │
│  │  ┌─────────────────────────────────┐       │   │
│  │  │ ☐ I agree to Terms of Service   │       │   │
│  │  │   (E14-Register-TermsCheckbox)  │       │   │
│  │  └─────────────────────────────────┘       │   │
│  │                                             │   │
│  │  ┌─────────────────────────────────┐       │   │
│  │  │     [CREATE ACCOUNT]            │       │   │
│  │  │  (E15-Register-SubmitButton)   │       │   │
│  │  └─────────────────────────────────┘       │   │
│  │                                             │   │
│  └─────────────────────────────────────────────┘   │
│                                                     │
│  Already have an account? [Log in]                 │
│                                                     │
└─────────────────────────────────────────────────────┘
```

### VALIDATION RULES

```typescript
// Zod schema (used by P2)
const registerSchema = z.object({
  email: z.string()
    .email('Invalid email address'),
  
  username: z.string()
    .min(3, 'Min 3 characters')
    .max(50, 'Max 50 characters')
    .regex(/^[a-zA-Z0-9_]+$/, 'Alphanumeric and underscore only'),
  
  name: z.string()
    .min(1, 'Name required')
    .max(100, 'Max 100 characters'),
  
  password: z.string()
    .min(8, 'Min 8 characters')
    .regex(/[A-Z]/, 'At least one uppercase')
    .regex(/[a-z]/, 'At least one lowercase')
    .regex(/[0-9]/, 'At least one number'),
  
  confirmPassword: z.string(),
  
  terms: z.boolean()
    .refine(val => val === true, 'Must accept terms'),
    
  city: z.string().optional(),
  country: z.string().optional(),
}).refine(data => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
});
```

### PASSWORD STRENGTH INDICATOR

```css
.password-strength {
  display: flex;
  gap: var(--space-1);
  margin-top: var(--space-2);
}

.strength-bar {
  height: 4px;
  flex: 1;
  background: var(--glass-border);
  border-radius: var(--radius-full);
  transition: var(--transition-base);
}

.strength-bar.filled {
  background: var(--color-success);
}

.strength-bar.filled.weak {
  background: var(--color-error);
}

.strength-bar.filled.medium {
  background: var(--color-warning);
}

.strength-bar.filled.strong {
  background: var(--color-success);
}
```

---

## 2.6 LANDING PAGE (P6)

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: Landing Page                                                ║
║ ROUTE: /                                                          ║
║ AUTH: Public                                                      ║
║ LAYOUT: Multi-section marketing page                             ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Page Agent:**
- P6 (Landing Page Agent)
  - Hero section animation
  - Feature showcase
  - CTA tracking
  - Scroll animations
  - Video/image lazy loading

**Component Agents:**
- E20-Landing-Hero
- E21-Landing-Features
- E22-Landing-CTAButton
- E23-Landing-Testimonials
- E24-Landing-Footer

---

### PAGE LAYOUT (MT OCEAN THEME)

```
┌──────────────────────────────────────────────────────┐
│  HERO SECTION                                        │
│  background: var(--bg-ocean-gradient)                │
│  min-height: 100vh                                   │
│                                                      │
│  ┌────────────────────────────────────┐             │
│  │         [NAVIGATION BAR]           │             │
│  │  Logo    About  Pricing  [Login]  │             │
│  │  color: var(--text-ocean-primary)  │             │
│  └────────────────────────────────────┘             │
│                                                      │
│       Your AI-Powered Life CEO                      │
│       (--text-4xl, white, bold)                     │
│                                                      │
│    Manage your life with 16 specialized AI agents   │
│    (--text-xl, --text-ocean-secondary)              │
│                                                      │
│  ┌──────────────┐  ┌──────────────┐                │
│  │ Get Started  │  │ Watch Demo   │                │
│  │ (primary btn)│  │ (outline btn)│                │
│  │ (E22-CTA)    │  │              │                │
│  └──────────────┘  └──────────────┘                │
│                                                      │
│       [Hero Illustration/3D Animation]              │
│                                                      │
└──────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────┐
│  FEATURES SECTION (E21-Landing-Features)             │
│  background: white / dark:--ocean-teal-900          │
│  padding: --space-20 0                              │
│                                                      │
│            16 Specialized AI Agents                  │
│            (--text-3xl, centered)                   │
│                                                      │
│  ┌────────┐  ┌────────┐  ┌────────┐  ┌────────┐   │
│  │  💼    │  │  📅    │  │  💰    │  │  🏋️   │   │
│  │Career  │  │Calendar│  │Finance │  │Health  │   │
│  │Agent   │  │Agent   │  │Agent   │  │Agent   │   │
│  │        │  │        │  │        │  │        │   │
│  │[Details│  │[Details│  │[Details│  │[Details│   │
│  └────────┘  └────────┘  └────────┘  └────────┘   │
│  (Glassmorphic cards with hover effects)            │
│                                                      │
└──────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────┐
│  TESTIMONIALS SECTION (E23-Landing-Testimonials)     │
│  background: var(--ocean-seafoam-50)                │
│  padding: --space-16 0                              │
│                                                      │
│         What Our Users Say                          │
│                                                      │
│  [Carousel of testimonial cards]                     │
│                                                      │
└──────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────┐
│  CTA SECTION                                         │
│  background: var(--bg-ocean-gradient)                │
│  color: white                                        │
│  padding: --space-20                                │
│                                                      │
│       Ready to Transform Your Life?                  │
│       (--text-3xl)                                  │
│                                                      │
│  ┌──────────────────────┐                           │
│  │  Start Free Trial    │                           │
│  │  (large button)      │                           │
│  └──────────────────────┘                           │
│                                                      │
└──────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────┐
│  FOOTER (E24-Landing-Footer)                         │
│  background: --ocean-teal-800                       │
│  color: --text-ocean-secondary                      │
│                                                      │
│  Logo  │  Product  │  Company  │  Legal              │
│        │  Features │  About    │  Privacy            │
│        │  Pricing  │  Careers  │  Terms              │
│                                                      │
│  © 2025 Mundo Tango. All rights reserved.           │
│                                                      │
└──────────────────────────────────────────────────────┘
```

### GLASSMORPHIC FEATURE CARDS

```css
.feature-card {
  background: var(--glass-bg);
  backdrop-filter: blur(var(--glass-blur));
  border: 1px solid var(--glass-border);
  border-radius: var(--radius-2xl);
  padding: var(--space-6);
  transition: var(--transition-base);
}

.feature-card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-xl);
  border-color: var(--color-primary);
}

.dark .feature-card {
  background: var(--glass-bg-dark);
  border-color: hsla(186, 72%, 60%, 0.25);
}

.dark .feature-card:hover {
  box-shadow: var(--glow-seafoam);
}
```

=======================================================================
PART 3: AUTHENTICATED APP PAGES (P10-P29)
=======================================================================

## 3.1 HOME FEED (P10) ⭐ FLAGSHIP PAGE

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: Home Feed                                                   ║
║ ROUTE: /feed                                                      ║
║ AUTH: Required (Authenticated users)                             ║
║ LAYOUT: Pattern B (Three-Column Mundo Tango Layout)              ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Page Agent:**
- P10 (Home Feed Page Agent) ⭐ CRITICAL
  - Post loading (infinite scroll)
  - Real-time updates (WebSocket)
  - Cache management
  - Post creation coordination
  - Reaction tracking
  - Comment management
  - Feed algorithm (ML-based ranking)

**Component Agents:**
- LEFT SIDEBAR:
  - E30-Feed-UserProfile (Current user mini-profile)
  - E31-Feed-QuickLinks (Navigation shortcuts)
  - E32-Feed-LanguageSwitcher (i18n selector)

- MAIN FEED:
  - E33-Feed-CreatePost (Post creation form)
  - E34-Feed-PostList (Virtual scrolling container)
  - E35-Feed-PostCard-{id} (Individual post card)
  - E36-Post-ReactionButtons (Like/Love/Celebrate)
  - E37-Post-CommentSection (Comments with threading)
  - E38-Feed-InfiniteScroll (Pagination trigger)

- RIGHT SIDEBAR:
  - E39-Feed-EventsWidget (Upcoming 5 events)
  - E40-Feed-OnlineUsers (Presence indicator)
  - E41-Feed-MrBlueButton (AI companion access)

**Backend Agents:**
- B10-FeedAPI (GET /api/feed)
- B11-PostsAPI (POST/PATCH/DELETE /api/posts)
- B12-ReactionsAPI (POST /api/posts/:id/react)
- B13-CommentsAPI (GET/POST /api/posts/:id/comments)

**Feature Agents:**
- F10-InfiniteScroll (Pagination logic)
- F11-WebSocket (Real-time post updates)
- F12-ImageUpload (Cloudinary integration)

**AI Agents:**
- A66-FeedAlgorithm (ML-based post ranking)
- A73-MrBlue (AI companion)

---

### PAGE LAYOUT (MT OCEAN THEME - THREE COLUMNS)

```
┌────────────────────────────────────────────────────────────────────┐
│  TOPBAR (fixed, --topbar-height: 64px)                            │
│  ┌──────────────────────────────────────────────────────────────┐ │
│  │ [MT Logo]  Search  [🔔] [👤] [⚙️]                            │ │
│  │           (F15)    Notif  Profile  Settings                   │ │
│  └──────────────────────────────────────────────────────────────┘ │
└────────────────────────────────────────────────────────────────────┘

┌────────┬────────────────────────────────┬──────────────────────┐
│ LEFT   │  MAIN FEED                     │  RIGHT SIDEBAR       │
│ SIDEBAR│  (scrollable)                  │  (320px)             │
│ (280px)│                                │                      │
│        │                                │                      │
│ ┌────┐ │ ┌────────────────────────────┐ │ ┌────────────────┐ │
│ │[👤]│ │ │ What's on your mind?       │ │ │ Upcoming Events│ │
│ │John│ │ │ (E33-Feed-CreatePost)      │ │ │ (E39-Widget)   │ │
│ │Doe │ │ │ ┌────────────────────────┐ │ │ │                │ │
│ └────┘ │ │ │ [Write something...]   │ │ │ │ Oct 31         │ │
│        │ │ │ [📷] [🎥] [📊] [😊]    │ │ │ │ Tango Night    │ │
│ Profile│ │ │ ┌──────────┐           │ │ │ │ 8:00 PM        │ │
│ View   │ │ │ │ [POST]   │           │ │ │ │                │ │
│ Edit   │ │ │ └──────────┘           │ │ │ │ Nov 1          │ │
│ (E31)  │ │ └────────────────────────┘ │ │ │ Language Exch  │ │
│        │ │ Glassmorphic card          │ │ │ ...            │ │
│ ──────│ │ ┌────────────────────────────┐ │ └────────────────┘ │
│        │ │ │ POST CARD (E35-{id})       │ │                    │
│ Feed   │ │ │ ┌──┐ Jane Smith · 2h ago  │ │ ┌────────────────┐ │
│ Events │ │ │ │👤│ Just got back from... │ │ │ Online Now (5) │ │
│ Msgs   │ │ │ └──┘                       │ │ │ (E40-Online)   │ │
│ Friends│ │ │                            │ │ │                │ │
│ (Quick │ │ │ [Post content/image here]  │ │ │ 🟢 Maria       │ │
│ Links) │ │ │                            │ │ │ 🟢 Carlos      │ │
│        │ │ │ ┌──────────────────────┐   │ │ │ 🟢 Ana         │ │
│ ──────│ │ │ │ 👍 12  💬 5  🔗 Share│   │ │ │ ...            │ │
│        │ │ │ │ (E36-Reactions)      │   │ │ └────────────────┘ │
│ 🌐 EN  │ │ │ └──────────────────────┘   │ │                    │
│ Lang   │ │ │                            │ │ ┌────────────────┐ │
│ (E32)  │ │ │ [Comments section]         │ │ │  Mr Blue AI    │ │
│        │ │ │ (E37-Comments)             │ │ │  (E41-MrBlue)  │ │
│        │ │ └────────────────────────────┘ │ │ │                │ │
│        │ │                                │ │ │ [💬 Chat]      │ │
│        │ │ [More post cards...]           │ │ │ Ask me         │ │
│        │ │ (E34-PostList)                 │ │ │ anything!      │ │
│        │ │                                │ │ └────────────────┘ │
│        │ │ [Loading more...] (E38)        │ │                    │
│        │ │                                │ │                    │
└────────┴────────────────────────────────┴──────────────────────┘
```

---

### COMPONENT SPECIFICATIONS

**Left Sidebar (Ocean Gradient Background):**
```css
.sidebar-left {
  width: 280px;
  background: var(--sidebar-bg); /* Ocean gradient */
  color: var(--sidebar-text);
  padding: var(--space-6);
  height: calc(100vh - var(--topbar-height));
  overflow-y: auto;
  position: fixed;
  top: var(--topbar-height);
  left: 0;
}

.sidebar-profile-card {
  background: hsla(0, 0%, 100%, 0.15);
  backdrop-filter: blur(12px);
  border: 1px solid hsla(0, 0%, 100%, 0.2);
  border-radius: var(--radius-xl);
  padding: var(--space-4);
  text-align: center;
}

.sidebar-nav-item {
  padding: var(--space-3);
  border-radius: var(--radius-lg);
  transition: var(--transition-base);
  cursor: pointer;
}

.sidebar-nav-item:hover {
  background: var(--sidebar-hover-bg);
}

.sidebar-nav-item.active {
  background: var(--sidebar-active-bg);
  color: var(--sidebar-accent);
}
```

**Main Feed (White/Dark Background):**
```css
.main-feed {
  margin-left: 280px;
  margin-right: 320px;
  padding: var(--space-6);
  min-height: 100vh;
  background: var(--bg-primary);
}

.dark .main-feed {
  background: var(--ocean-teal-900);
}
```

**Create Post Card:**
```css
.create-post-card {
  background: var(--glass-bg);
  backdrop-filter: blur(var(--glass-blur));
  border: 1px solid var(--glass-border);
  border-radius: var(--radius-2xl);
  padding: var(--space-6);
  margin-bottom: var(--space-6);
  box-shadow: var(--shadow-md);
}

.dark .create-post-card {
  background: var(--glass-bg-dark);
  border-color: hsla(186, 72%, 60%, 0.25);
}

.create-post-textarea {
  background: white;
  border: 1px solid var(--glass-border);
  border-radius: var(--radius-lg);
  padding: var(--space-4);
  width: 100%;
  min-height: 80px;
  resize: vertical;
  font-size: var(--text-base);
}

.dark .create-post-textarea {
  background: hsla(218, 70%, 15%, 0.8);
  color: var(--text-ocean-primary);
}
```

**Post Card:**
```css
.post-card {
  background: var(--glass-bg);
  backdrop-filter: blur(var(--glass-blur));
  border: 1px solid var(--glass-border);
  border-radius: var(--radius-2xl);
  padding: var(--space-6);
  margin-bottom: var(--space-6);
  box-shadow: var(--shadow-md);
  transition: var(--transition-base);
}

.dark .post-card {
  background: var(--glass-bg-dark);
  border-color: hsla(186, 72%, 60%, 0.25);
}

.post-card:hover {
  box-shadow: var(--shadow-lg);
}

.post-header {
  display: flex;
  align-items: center;
  gap: var(--space-3);
  margin-bottom: var(--space-4);
}

.post-avatar {
  width: 48px;
  height: 48px;
  border-radius: var(--radius-full);
  border: 2px solid var(--color-primary);
}

.post-author {
  font-weight: var(--font-weight-semibold);
  color: var(--text-primary);
}

.dark .post-author {
  color: var(--text-ocean-primary);
}

.post-timestamp {
  font-size: var(--text-sm);
  color: var(--text-ocean-muted);
}
```

**Reaction Buttons:**
```css
.reaction-bar {
  display: flex;
  gap: var(--space-4);
  padding: var(--space-3) 0;
  border-top: 1px solid var(--glass-border);
  margin-top: var(--space-4);
}

.reaction-button {
  display: flex;
  align-items: center;
  gap: var(--space-2);
  padding: var(--space-2) var(--space-4);
  border-radius: var(--radius-lg);
  background: transparent;
  border: none;
  cursor: pointer;
  transition: var(--transition-fast);
  font-size: var(--text-sm);
}

.reaction-button:hover {
  background: hsla(177, 72%, 56%, 0.1);
  color: var(--color-primary);
}

.reaction-button.active {
  color: var(--color-primary);
  font-weight: var(--font-weight-semibold);
}
```

**Right Sidebar:**
```css
.sidebar-right {
  width: 320px;
  padding: var(--space-6);
  height: calc(100vh - var(--topbar-height));
  overflow-y: auto;
  position: fixed;
  top: var(--topbar-height);
  right: 0;
  background: var(--bg-primary);
}

.dark .sidebar-right {
  background: var(--ocean-teal-900);
}

.widget-card {
  background: var(--glass-bg);
  backdrop-filter: blur(var(--glass-blur));
  border: 1px solid var(--glass-border);
  border-radius: var(--radius-xl);
  padding: var(--space-4);
  margin-bottom: var(--space-4);
}

.dark .widget-card {
  background: var(--glass-bg-dark);
  border-color: hsla(186, 72%, 60%, 0.25);
}
```

---

### DATA FLOW & REAL-TIME UPDATES

```
PAGE LOAD:
P10 initializes
  ↓
GET /api/feed?page=1 (B10-FeedAPI)
  ↓
Database: SELECT posts with ML ranking (A66)
  ↓
E34-Feed-PostList renders posts
  ↓
WebSocket connect (F11)
  ├─ Subscribe to "post:new"
  ├─ Subscribe to "post:update"
  ├─ Subscribe to "post:delete"
  └─ Subscribe to "presence:update"

REAL-TIME POST CREATION:
User types in E33-Feed-CreatePost
  ↓
Clicks POST button
  ↓
[IF image] → Upload to Cloudinary (F12)
  ↓
POST /api/posts (B11-PostsAPI)
  ↓
Database: INSERT post
  ↓
Server broadcasts: socket.emit("post:new", post)
  ↓
All connected clients receive
  ↓
P10 prepends post to E34-Feed-PostList
  ↓
Optimistic update (instant UI)

REACTIONS:
User clicks 👍 (E36-Reaction-Like)
  ↓
Optimistic update (count +1 immediately)
  ↓
POST /api/posts/:id/react (B12)
  ↓
Database: INSERT/UPDATE reaction
  ↓
WebSocket broadcast reaction update
  ↓
All viewers see updated count
```

---

### INFINITE SCROLL IMPLEMENTATION

```typescript
// E38-Feed-InfiniteScroll logic
const { data, fetchNextPage, hasNextPage, isFetchingNextPage } = 
  useInfiniteQuery({
    queryKey: ['/api/feed'],
    queryFn: ({ pageParam = 1 }) => 
      apiRequest(`/api/feed?page=${pageParam}&limit=20`),
    getNextPageParam: (lastPage, pages) => 
      lastPage.hasMore ? pages.length + 1 : undefined,
  });

// Intersection Observer for auto-load
useEffect(() => {
  const observer = new IntersectionObserver((entries) => {
    if (entries[0].isIntersecting && hasNextPage && !isFetchingNextPage) {
      fetchNextPage();
    }
  });
  
  const target = document.getElementById('scroll-trigger');
  if (target) observer.observe(target);
  
  return () => observer.disconnect();
}, [hasNextPage, isFetchingNextPage]);
```

---

### RESPONSIVE BEHAVIOR

**Desktop (>1280px):**
- Three-column layout as shown
- Left: 280px, Main: flex-1, Right: 320px

**Tablet (768-1280px):**
- Hide left sidebar (collapsible hamburger menu)
- Main: full width minus right sidebar
- Right: 280px

**Mobile (<768px):**
- Single column layout
- Hide both sidebars
- Bottom tab navigation
- Events widget accessible via modal
- Full-width post cards

---

## 3.4 MESSAGES PAGE (P18) ⭐

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: Messages                                                    ║
║ ROUTE: /messages                                                  ║
║ AUTH: Required                                                    ║
║ LAYOUT: Pattern C (Two-Column Split)                             ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Page Agent:**
- P18 (Messages Page Agent)
  - Conversation list management
  - Real-time message delivery
  - Typing indicators
  - Read receipts
  - File attachment handling
  - Message search
  - Conversation archiving

**Component Agents:**
- LEFT:
  - E50-Msg-ConversationList (List of chats)
  - E51-Msg-ConversationItem-{id} (Individual chat preview)
  - E52-Msg-SearchBar (Search conversations)

- RIGHT:
  - E53-Msg-ChatHeader (Other user info)
  - E54-Msg-MessageList (Scrollable messages)
  - E55-Msg-MessageBubble-{id} (Individual message)
  - E56-Msg-TypingIndicator (Shows "typing...")
  - E57-Msg-MessageInput (Text input + attachments)
  - E58-Msg-SendButton

**Backend Agents:**
- B20-MessagesAPI (GET/POST /api/messages)
- B21-ConversationsAPI (GET /api/conversations)

**Feature Agents:**
- F11-WebSocket (Real-time messaging)
- F20-FileUpload (Attachment handling)

---

### PAGE LAYOUT (MT OCEAN THEME)

```
┌────────────────────────────────────────────────────────┐
│  TOPBAR                                                │
└────────────────────────────────────────────────────────┘

┌──────────────────────┬─────────────────────────────────┐
│ CONVERSATION LIST    │  CHAT WINDOW                    │
│ (320px)              │  (flex-1)                       │
│                      │                                 │
│ ┌──────────────────┐ │ ┌─────────────────────────────┐ │
│ │ [🔍 Search...]   │ │ │ [👤] Maria Rodriguez    [⋯] │ │
│ │ (E52-SearchBar)  │ │ │ Online now                  │ │
│ └──────────────────┘ │ │ (E53-Msg-ChatHeader)        │ │
│                      │ └─────────────────────────────┘ │
│ ┌──────────────────┐ │                                 │
│ │ 🟢 [👤] Maria    │ │ ┌─────────────────────────────┐ │
│ │ Hey! How are...  │ │ │ (E54-Msg-MessageList)       │ │
│ │ 2m ago          │ │ │                             │ │
│ │ (E51-{id})      │ │ │ ┌────────────────┐          │ │
│ └──────────────────┘ │ │ │ Hi Maria! I'm  │ (Me)    │ │
│                      │ │ │ doing great    │          │ │
│ ┌──────────────────┐ │ │ └────────────────┘ 10:30 AM│ │
│ │ [👤] Carlos      │ │ │                             │ │
│ │ Thanks for...    │ │ │ ┌────────────────┐          │ │
│ │ 1h ago          │ │ │(Maria) │ That's great!│      │ │
│ │                 │ │ │        │ Let's meet   │      │ │
│ └──────────────────┘ │ │        └────────────┘10:31AM│ │
│                      │ │                             │ │
│ ┌──────────────────┐ │ │ ┌────────────────┐          │ │
│ │ [👤] Ana         │ │ │ │ Sounds good!   │ (Me)    │ │
│ │ See you soon!    │ │ │ │ When?          │          │ │
│ │ Yesterday       │ │ │ └────────────────┘ 10:32 AM│ │
│ └──────────────────┘ │ │                             │ │
│                      │ │ [Maria is typing...]         │ │
│ [More conversations] │ │ (E56-TypingIndicator)       │ │
│                      │ └─────────────────────────────┘ │
│                      │                                 │
│                      │ ┌─────────────────────────────┐ │
│                      │ │ [📎] [Type a message...]    │ │
│                      │ │ (E57-Input)          [Send]│ │
│                      │ │                      (E58) │ │
│                      │ └─────────────────────────────┘ │
└──────────────────────┴─────────────────────────────────┘
```

---

### MESSAGE BUBBLE STYLING

```css
.message-bubble {
  max-width: 60%;
  padding: var(--space-3) var(--space-4);
  border-radius: var(--radius-xl);
  margin-bottom: var(--space-2);
  position: relative;
  word-wrap: break-word;
}

/* Sent messages (right aligned) */
.message-bubble.sent {
  background: var(--color-primary);
  color: white;
  margin-left: auto;
  border-bottom-right-radius: var(--space-1);
}

/* Received messages (left aligned) */
.message-bubble.received {
  background: var(--glass-bg);
  border: 1px solid var(--glass-border);
  margin-right: auto;
  border-bottom-left-radius: var(--space-1);
}

.dark .message-bubble.received {
  background: var(--glass-bg-dark);
  border-color: hsla(186, 72%, 60%, 0.25);
  color: var(--text-ocean-primary);
}

.message-timestamp {
  font-size: var(--text-xs);
  opacity: 0.7;
  margin-top: var(--space-1);
}

.message-bubble.sent .message-timestamp {
  text-align: right;
}
```

**Typing Indicator Animation:**
```css
.typing-indicator {
  display: flex;
  align-items: center;
  gap: var(--space-2);
  padding: var(--space-3);
  font-size: var(--text-sm);
  color: var(--text-ocean-muted);
}

.typing-dots {
  display: flex;
  gap: 4px;
}

.typing-dot {
  width: 6px;
  height: 6px;
  border-radius: 50%;
  background: var(--color-primary);
  animation: typing 1.4s infinite;
}

.typing-dot:nth-child(2) {
  animation-delay: 0.2s;
}

.typing-dot:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes typing {
  0%, 60%, 100% {
    transform: translateY(0);
    opacity: 0.7;
  }
  30% {
    transform: translateY(-10px);
    opacity: 1;
  }
}
```

---

### REAL-TIME MESSAGING FLOW

```
USER SENDS MESSAGE:
User types in E57-Msg-MessageInput
  ↓
Clicks Send (E58)
  ↓
Optimistic update (show message immediately)
  ↓
POST /api/messages (B20-MessagesAPI)
  {
    conversationId: 123,
    content: "Hello!",
    recipientId: 456
  }
  ↓
Database: INSERT message
  ↓
WebSocket emit to recipient:
  socket.to(recipientId).emit("message:new", message)
  ↓
Recipient's P18 receives event
  ↓
E54-Msg-MessageList appends new message
  ↓
Send read receipt:
  socket.emit("message:read", messageId)

TYPING INDICATOR:
User types in E57-Msg-MessageInput
  ↓
Debounced (500ms): socket.emit("typing:start", { conversationId })
  ↓
Recipient sees E56-TypingIndicator
  ↓
After 3s of no typing: socket.emit("typing:stop")
  ↓
E56 hides
```

=======================================================================
PART 4: ADMIN PANEL PAGES (P30-P45)
=======================================================================

## 4.1 ADMIN DASHBOARD (P30) ⭐

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: Admin Dashboard                                             ║
║ ROUTE: /admin                                                     ║
║ AUTH: Admin/Super Admin only                                     ║
║ LAYOUT: Pattern D (Full-Width Dashboard with Cards)              ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Page Agent:**
- P30 (Admin Dashboard Agent)
  - System metrics aggregation
  - Real-time statistics
  - Quick action coordination
  - Alert monitoring
  - Performance tracking

**Component Agents:**
- E70-Admin-TopStats (Key metrics cards)
- E71-Admin-UserGrowthChart (Recharts)
- E72-Admin-RecentActivity (Activity feed)
- E73-Admin-SystemHealth (Status indicators)
- E74-Admin-QuickActions (Action buttons)

**Backend Agents:**
- B30-AdminAPI (GET /api/admin/stats)
- B31-MetricsAPI (GET /api/admin/metrics)

---

### PAGE LAYOUT (MT OCEAN THEME)

```
┌──────────────────────────────────────────────────────┐
│  ADMIN TOPBAR                                        │
│  ┌────────────────────────────────────────────────┐ │
│  │ [MT Logo] Dashboard > Overview    [👤] Admin   │ │
│  └────────────────────────────────────────────────┘ │
└──────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────┐
│  SIDEBAR (280px)                                     │
│  Ocean gradient background                           │
│                                                      │
│  📊 Dashboard       ← Active                         │
│  👥 Users                                            │
│  📈 Analytics                                        │
│  🎯 Projects                                         │
│  🧠 ESA Mind                                         │
│  ✏️ Visual Editor                                    │
│  ⚙️ Settings                                         │
└──────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────┐
│  MAIN CONTENT (margin-left: 280px)                      │
│  padding: --space-8                                      │
│                                                          │
│  Dashboard Overview                                      │
│  (--text-3xl, --font-weight-bold)                       │
│                                                          │
│  ┌────────────────────────────────────────────────────┐ │
│  │ KEY METRICS (E70-Admin-TopStats)                   │ │
│  │ Grid: 4 columns                                    │ │
│  │                                                    │ │
│  │ ┌──────────┐ ┌──────────┐ ┌──────────┐ ┌────────┐│ │
│  │ │ 👥       │ │ 📝       │ │ 📅       │ │ 💰     ││ │
│  │ │ 1,234    │ │ 567      │ │ 89       │ │ $45K   ││ │
│  │ │ Users    │ │ Posts    │ │ Events   │ │Revenue ││ │
│  │ │ +12%     │ │ +8%      │ │ +15%     │ │ +22%   ││ │
│  │ └──────────┘ └──────────┘ └──────────┘ └────────┘│ │
│  │ (Glassmorphic cards with gradient borders)        │ │
│  └────────────────────────────────────────────────────┘ │
│                                                          │
│  ┌─────────────────────┬────────────────────────────┐   │
│  │ USER GROWTH CHART   │  SYSTEM HEALTH             │   │
│  │ (E71-Chart)         │  (E73-SystemHealth)        │   │
│  │                     │                            │   │
│  │ [Line chart showing │  ✅ Database: Healthy      │   │
│  │  user growth over   │  ✅ API: Operational       │   │
│  │  last 30 days]      │  ⚠️ Cache: 85% capacity   │   │
│  │                     │  ✅ Storage: Normal        │   │
│  │ Recharts component  │  ✅ WebSocket: Connected   │   │
│  │                     │                            │   │
│  └─────────────────────┴────────────────────────────┘   │
│                                                          │
│  ┌──────────────────────────────────────────────────┐   │
│  │ RECENT ACTIVITY (E72-Admin-RecentActivity)       │   │
│  │                                                  │   │
│  │ • User john_doe registered               2m ago  │   │
│  │ • Event "Tango Night" created            5m ago  │   │
│  │ • Post reported by user123              10m ago  │   │
│  │ • Payment processed ($50)               15m ago  │   │
│  │ • Admin logged in                       20m ago  │   │
│  │                                                  │   │
│  │ [View All Activity →]                            │   │
│  └──────────────────────────────────────────────────┘   │
│                                                          │
│  ┌──────────────────────────────────────────────────┐   │
│  │ QUICK ACTIONS (E74-Admin-QuickActions)           │   │
│  │                                                  │   │
│  │ [+ Create User] [📧 Send Announcement]           │   │
│  │ [🚫 Ban User]   [🔧 Run Maintenance]             │   │
│  │                                                  │   │
│  └──────────────────────────────────────────────────┘   │
│                                                          │
└──────────────────────────────────────────────────────────┘
```

---

### STAT CARD STYLING

```css
.stat-card {
  background: var(--glass-bg);
  backdrop-filter: blur(var(--glass-blur));
  border: 2px solid transparent;
  border-radius: var(--radius-2xl);
  padding: var(--space-6);
  position: relative;
  overflow: hidden;
  transition: var(--transition-base);
}

.stat-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: inherit;
  padding: 2px;
  background: linear-gradient(135deg, 
    var(--ocean-seafoam-400), 
    var(--ocean-cyan-400));
  -webkit-mask: 
    linear-gradient(#fff 0 0) content-box, 
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
  opacity: 0.5;
}

.stat-card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-xl);
}

.stat-card:hover::before {
  opacity: 1;
}

.dark .stat-card {
  background: var(--glass-bg-dark);
}

.stat-icon {
  font-size: var(--text-3xl);
  margin-bottom: var(--space-2);
}

.stat-value {
  font-size: var(--text-4xl);
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin-bottom: var(--space-1);
}

.dark .stat-value {
  color: var(--text-ocean-primary);
}

.stat-label {
  font-size: var(--text-sm);
  color: var(--text-ocean-secondary);
  margin-bottom: var(--space-2);
}

.stat-change {
  font-size: var(--text-sm);
  font-weight: var(--font-weight-semibold);
  display: inline-flex;
  align-items: center;
  gap: var(--space-1);
}

.stat-change.positive {
  color: var(--color-success);
}

.stat-change.negative {
  color: var(--color-error);
}
```

---

## 4.5 ESA MIND (P35) ⭐

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: ESA Mind                                                    ║
║ ROUTE: /admin/esa-mind                                           ║
║ AUTH: Super Admin only                                           ║
║ LAYOUT: Interactive visualization dashboard                      ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Page Agent:**
- P35 (ESA Mind Page Agent)
  - Agent status monitoring (105 agents)
  - Layer health tracking (61 layers)
  - Phase progress visualization
  - Interactive diagram coordination
  - Real-time updates
  - Performance metrics

**Component Agents:**
- E80-ESA-AgentGrid (105 agent status cards)
- E81-ESA-LayerVisualization (61 layers interactive)
- E82-ESA-PhaseTimeline (Development phases)
- E83-ESA-MetricsPanel (Performance stats)
- E84-ESA-SearchFilter (Filter agents/layers)

**Backend Agents:**
- B40-ESAMetricsAPI (GET /api/admin/esa-metrics)

**AI Agents:**
- A79-ESACoordinator (Agent coordination)

---

### PAGE LAYOUT (MT OCEAN THEME)

```
┌──────────────────────────────────────────────────────────┐
│  ESA MIND - Intelligence Dashboard                       │
│  105 Agents · 61 Layers · 7 Views                       │
│                                                          │
│  ┌────────────────────────────────────────────────────┐ │
│  │ FILTER BAR (E84-ESA-SearchFilter)                  │ │
│  │ [🔍 Search agents...] [Layer▾] [Status▾] [Phase▾] │ │
│  └────────────────────────────────────────────────────┘ │
│                                                          │
│  ┌────────────────────────────────────────────────────┐ │
│  │ AGENT STATUS OVERVIEW (E80-ESA-AgentGrid)          │ │
│  │                                                    │ │
│  │ ✅ Active: 95 agents                               │ │
│  │ 🔄 In Progress: 8 agents                           │ │
│  │ ⏸️ Paused: 2 agents                                │ │
│  │ ❌ Failed: 0 agents                                │ │
│  │                                                    │ │
│  │ Grid of 105 Agent Cards (responsive):              │ │
│  │ ┌────┐ ┌────┐ ┌────┐ ┌────┐ ┌────┐ ┌────┐         │ │
│  │ │ P1 │ │ P2 │ │ P3 │ │ P4 │ │ P5 │ │ P6 │  ...   │ │
│  │ │ ✅ │ │ ✅ │ │ ✅ │ │ 🔄 │ │ ✅ │ │ ✅ │         │ │
│  │ │95% │ │100%│ │88% │ │50% │ │100%│ │92% │         │ │
│  │ └────┘ └────┘ └────┘ └────┘ └────┘ └────┘         │ │
│  │                                                    │ │
│  │ [Click any agent for details]                      │ │
│  └────────────────────────────────────────────────────┘ │
│                                                          │
│  ┌────────────────────────────────────────────────────┐ │
│  │ LAYER VISUALIZATION (E81-ESA-LayerVisualization)   │ │
│  │ Interactive hierarchy diagram                      │ │
│  │                                                    │ │
│  │             ┌─ ESA Framework (61 Layers) ─┐        │ │
│  │             │                              │        │ │
│  │   ┌─────────┼──────────┬─────────────────┐│        │ │
│  │   │ Phase 0 │ Phase 1  │ Phase 2  │ ... ││        │ │
│  │   ├─────────┼──────────┼──────────┤     ││        │ │
│  │   │ ✅ 12/12│ 🔄 18/25 │ ⏸️ 0/30  │     ││        │ │
│  │   └─────────┴──────────┴──────────┴─────┘│        │ │
│  │             │                              │        │ │
│  │             └──────────────────────────────┘        │ │
│  │                                                    │ │
│  │ [Hover for layer details, click to expand]         │ │
│  └────────────────────────────────────────────────────┘ │
│                                                          │
│  ┌─────────────────────┬────────────────────────────┐   │
│  │ PHASE TIMELINE      │ METRICS PANEL              │   │
│  │ (E82-PhaseTimeline) │ (E83-ESA-MetricsPanel)     │   │
│  │                     │                            │   │
│  │ Phase 0: ✅ Complete│ Total Agents: 105          │   │
│  │ Phase 1: 🔄 72%     │ Active: 95 (90%)           │   │
│  │ Phase 2: ⏸️ Pending │ Avg Performance: 94%       │   │
│  │ Phase 3: ⏸️ Pending │ Success Rate: 98.5%        │   │
│  │ ...                 │ Failed Tasks: 3            │   │
│  │                     │ Uptime: 99.9%              │   │
│  │                     │                            │   │
│  └─────────────────────┴────────────────────────────┘   │
│                                                          │
└──────────────────────────────────────────────────────────┘
```

---

### AGENT STATUS CARD STYLING

```css
.agent-card {
  background: var(--glass-bg);
  backdrop-filter: blur(8px);
  border: 1px solid var(--glass-border);
  border-radius: var(--radius-lg);
  padding: var(--space-3);
  text-align: center;
  cursor: pointer;
  transition: var(--transition-base);
  position: relative;
}

.agent-card:hover {
  transform: scale(1.05);
  box-shadow: var(--shadow-lg);
  border-color: var(--color-primary);
}

.dark .agent-card {
  background: var(--glass-bg-dark);
}

.agent-card.status-active {
  border-left: 3px solid var(--color-success);
}

.agent-card.status-in-progress {
  border-left: 3px solid var(--color-warning);
}

.agent-card.status-paused {
  border-left: 3px solid var(--text-ocean-muted);
}

.agent-card.status-failed {
  border-left: 3px solid var(--color-error);
}

.agent-id {
  font-weight: var(--font-weight-bold);
  font-size: var(--text-base);
  margin-bottom: var(--space-1);
}

.agent-status-icon {
  font-size: var(--text-xl);
  margin-bottom: var(--space-2);
}

.agent-progress {
  font-size: var(--text-sm);
  color: var(--text-ocean-secondary);
}

.agent-progress-bar {
  height: 4px;
  background: var(--glass-border);
  border-radius: var(--radius-full);
  margin-top: var(--space-2);
  overflow: hidden;
}

.agent-progress-fill {
  height: 100%;
  background: linear-gradient(90deg, 
    var(--ocean-seafoam-400), 
    var(--ocean-cyan-400));
  transition: width var(--transition-slow);
}
```

=======================================================================
PART 6: THEME CUSTOMIZATION GUIDE
=======================================================================

## 6.1 DESIGN TOKEN ARCHITECTURE

### How the Theme System Works

The entire MT Ocean theme is built on **CSS Custom Properties (variables)**
defined in `client/src/styles/design-tokens.css`.

**Key Principle:** Change values in ONE place → updates EVERYWHERE

---

## 6.2 HOW TO CHANGE COLORS/THEME

### Step 1: Locate Design Tokens File

```
client/src/styles/design-tokens.css
```

### Step 2: Modify Color Variables

**Example: Change Primary Color from Turquoise to Purple**

```css
/* BEFORE (Turquoise) */
:root {
  --ocean-seafoam-400: hsl(177, 72%, 56%);  /* #40E0D0 */
  --color-primary: var(--ocean-seafoam-400);
}

/* AFTER (Purple) */
:root {
  --ocean-seafoam-400: hsl(270, 72%, 56%);  /* Purple */
  --color-primary: var(--ocean-seafoam-400);
}
```

**Result:** ALL buttons, links, accents automatically become purple!

---

### Step 3: Change Entire Theme (Ocean → Forest)

```css
/* NEW THEME: Forest Green */
:root {
  /* Primary: Forest Green instead of Turquoise */
  --ocean-seafoam-400: hsl(140, 60%, 45%);  /* #2E8B57 Sea Green */
  
  /* Mid-tone: Moss Green instead of Cyan */
  --ocean-cyan-400: hsl(120, 50%, 40%);     /* #339933 Moss */
  
  /* Deep: Dark Green instead of Navy */
  --ocean-teal-500: hsl(150, 80%, 20%);     /* #0D4D2E Forest */
  --ocean-teal-900: hsl(150, 90%, 10%);     /* #051A0F Deep Forest */
  
  /* Update gradient */
  --bg-ocean-gradient: linear-gradient(180deg, 
    var(--ocean-teal-500) 0%, 
    var(--ocean-teal-700) 50%, 
    var(--ocean-teal-800) 100%);
}
```

**That's it!** The ENTIRE platform now uses forest theme.

---

### Step 4: Customize Glassmorphism

```css
:root {
  /* Make glass MORE transparent */
  --glass-bg: hsl(195 60% 92% / 0.7);  /* Was 0.9, now 0.7 */
  
  /* Increase blur */
  --glass-blur: 24px;  /* Was 18px */
  
  /* Change border color */
  --glass-border: hsl(140 60% 45% / 0.3);  /* Match new theme */
}

.dark {
  --glass-bg-dark: hsla(150, 90%, 10%, 0.7);  /* Forest dark mode */
}
```

---

### Step 5: Change Spacing (Make Everything Tighter/Looser)

```css
:root {
  /* OPTION 1: Reduce all spacing by 25% */
  --space-1: 0.1875rem;  /* Was 0.25rem (4px), now 3px */
  --space-2: 0.375rem;   /* Was 0.5rem (8px), now 6px */
  --space-4: 0.75rem;    /* Was 1rem (16px), now 12px */
  --space-6: 1.125rem;   /* Was 1.5rem (24px), now 18px */
  
  /* OPTION 2: Increase all spacing by 25% */
  --space-1: 0.3125rem;  /* 5px */
  --space-2: 0.625rem;   /* 10px */
  --space-4: 1.25rem;    /* 20px */
  --space-6: 1.875rem;   /* 30px */
}
```

---

### Step 6: Change Typography (Fonts, Sizes)

```css
:root {
  /* Use a different font family */
  font-family: 'Inter', 'Roboto', sans-serif;
  
  /* Make everything 10% larger */
  --text-xs: 0.825rem;    /* Was 0.75rem */
  --text-sm: 0.9625rem;   /* Was 0.875rem */
  --text-base: 1.1rem;    /* Was 1rem */
  --text-lg: 1.2375rem;   /* Was 1.125rem */
  --text-xl: 1.375rem;    /* Was 1.25rem */
  
  /* Or make everything 10% smaller */
  --text-xs: 0.675rem;
  --text-sm: 0.7875rem;
  --text-base: 0.9rem;
  --text-lg: 1.0125rem;
  --text-xl: 1.125rem;
}
```

---

## 6.3 COMPONENT THEMING SYSTEM

### How Components Use Tokens

**All components reference CSS variables, NOT hard-coded values.**

**Example: Button Component**

```css
/* ❌ BAD: Hard-coded values */
.button {
  background: #40E0D0;  /* Hard-coded color */
  padding: 12px 24px;   /* Hard-coded spacing */
  border-radius: 8px;   /* Hard-coded radius */
}

/* ✅ GOOD: Uses design tokens */
.button {
  background: var(--color-primary);
  padding: var(--space-3) var(--space-6);
  border-radius: var(--radius-lg);
}
```

**Why this matters:**
When you change `--color-primary` in design tokens,
ALL buttons update automatically!

---

### Component Token Mapping

| Component | Uses These Tokens |
|-----------|-------------------|
| Buttons | `--color-primary`, `--space-3`, `--radius-lg` |
| Cards | `--glass-bg`, `--glass-blur`, `--radius-2xl` |
| Inputs | `--glass-border`, `--space-3`, `--radius-lg` |
| Sidebar | `--sidebar-bg`, `--sidebar-text`, `--sidebar-width` |
| Text | `--text-base`, `--text-primary`, `--font-weight-*` |

---

### Dark Mode Token Override

```css
/* Light mode (default) */
:root {
  --bg-primary: hsl(210, 33%, 98%);
  --text-primary: hsl(208, 25%, 18%);
}

/* Dark mode (automatic override) */
.dark {
  --bg-primary: hsl(218, 70%, 10%);
  --text-primary: hsl(0, 0%, 98%);
}
```

**How it works:**
1. User toggles dark mode
2. `<html class="dark">` is added
3. All `.dark` token overrides activate
4. Entire UI switches to dark mode

**No component changes needed!**

---

### Creating New Theme Variants

**Example: Add "Sunset" Theme Variant**

```css
/* Add to design-tokens.css */
.theme-sunset {
  --color-primary: hsl(15, 80%, 55%);      /* Orange */
  --ocean-seafoam-400: hsl(15, 80%, 55%);  /* Orange */
  --ocean-cyan-400: hsl(340, 75%, 55%);    /* Pink */
  --ocean-teal-500: hsl(30, 70%, 40%);     /* Dark Orange */
  --ocean-teal-900: hsl(0, 50%, 20%);      /* Dark Red */
  
  --bg-ocean-gradient: linear-gradient(180deg,
    hsl(15, 80%, 55%) 0%,
    hsl(340, 75%, 55%) 50%,
    hsl(0, 50%, 20%) 100%);
}
```

**Usage:**

```html
<!-- Apply sunset theme to entire app -->
<html class="theme-sunset">
  <!-- All components now use sunset colors -->
</html>
```

---

### Quick Theme Generator Formula

To create ANY theme:

1. **Choose 3 core colors:**
   - Primary (accent): `hsl(HUE, 70%, 55%)`
   - Mid-tone: `hsl(HUE+30, 65%, 45%)`
   - Deep: `hsl(HUE-20, 80%, 25%)`

2. **Replace in design tokens:**
   ```css
   --ocean-seafoam-400: hsl(YOUR_PRIMARY);
   --ocean-cyan-400: hsl(YOUR_MID_TONE);
   --ocean-teal-500: hsl(YOUR_DEEP);
   ```

3. **Done!** Entire platform updates.

**Example HUE values:**
- Ocean (current): 177
- Forest: 140
- Sunset: 15
- Lavender: 270
- Sky: 210

---

### Accessibility Considerations

**When changing colors, ensure:**

```css
/* Minimum contrast ratios (WCAG 2.1 AA) */
/* Text on background: 4.5:1 */
/* Large text on background: 3:1 */

/* Test your colors: */
/* https://webaim.org/resources/contrastchecker/ */

/* Example: Dark text on light background */
:root {
  --text-primary: hsl(208, 25%, 18%);  /* Dark gray */
  --bg-primary: hsl(210, 33%, 98%);    /* Nearly white */
  /* Contrast ratio: 12.6:1 ✅ Passes AAA */
}

/* Example: Light text on dark background */
.dark {
  --text-primary: hsl(0, 0%, 98%);     /* Nearly white */
  --bg-primary: hsl(218, 70%, 10%);    /* Very dark blue */
  /* Contrast ratio: 15.8:1 ✅ Passes AAA */
}
```

---

### Summary: Theme Customization Checklist

**To change the ENTIRE platform theme:**

1. ✅ Open `client/src/styles/design-tokens.css`
2. ✅ Modify color HSL values in `:root`
3. ✅ Update `--bg-ocean-gradient` if needed
4. ✅ Adjust dark mode overrides in `.dark`
5. ✅ Test contrast ratios for accessibility
6. ✅ Save file
7. ✅ Refresh browser → See new theme everywhere!

**No component files need to be touched.**
**All 50+ pages update automatically.**

---

=======================================================================
END OF COMPLETE PAGE LAYOUT REPORT
=======================================================================

GENERATED: October 31, 2025
METHOD: MB.MD (Simultaneously, Recursively, Critically)
TOTAL PAGES DOCUMENTED: 50+
THEME SYSTEM: Fully documented with customization guide
NEXT STEPS: Use this report to recreate any page with MT Ocean theme

For questions or clarifications, refer to:
- HANDOFF_04_DESIGN_SYSTEM_COMPLETE.txt (Full design tokens)
- HANDOFF_17_PAGE_ARCHITECTURE_DATAFLOWS.txt (Data flows)
- HANDOFF_32_PAGE_AGENTS_COMPLETE.txt (Complete agent list)

=======================================================================
PART 7: EXPANDED PAGES & CRITICAL COMPONENTS (MISSING FROM V1)
=======================================================================

## 7.1 GLOBAL NAVIGATION TOPBAR (ALL AUTHENTICATED PAGES)

╔═══════════════════════════════════════════════════════════════════╗
║ COMPONENT: Global Topbar Navigation                              ║
║ APPEARS ON: ALL authenticated pages (P10-P50)                    ║
║ HEIGHT: 64px (--topbar-height)                                   ║
║ POSITION: Fixed top                                              ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Component Agent:**
- E100-Global-Topbar (Master topbar coordinator)
  - Search coordination
  - Notification management
  - User menu dropdown
  - Real-time notification count
  - Theme toggle
  - Language switcher

**Sub-Component Agents:**
- E101-Topbar-Logo (MT logo, links to /feed)
- E102-Topbar-Search (Global search with autocomplete)
- E103-Topbar-Notifications (Notification bell with dropdown)
- E104-Topbar-UserMenu (Profile dropdown menu)
- E105-Topbar-ThemeToggle (Dark/light mode switch)
- E106-Topbar-LanguageSwitcher (i18n selector)
- E107-Topbar-MrBlueQuickAccess (Quick AI assistant)

**Feature Agents:**
- F15-GlobalSearch (Search across posts, events, users)
- F16-NotificationSystem (Real-time notifications)

**Backend Agents:**
- B50-SearchAPI (GET /api/search)
- B51-NotificationsAPI (GET /api/notifications)

---

### TOPBAR LAYOUT (MT OCEAN THEME)

```
┌──────────────────────────────────────────────────────────────┐
│  GLOBAL TOPBAR (E100-Global-Topbar)                          │
│  Fixed, z-index: 1030, height: 64px                          │
│  background: var(--topbar-bg) with glassmorphism             │
│                                                              │
│  ┌────┬──────────────────┬────────────────────────────────┐ │
│  │[MT]│  🔍 [Search...]  │  🔔  👤  🌙  🌐  [💬 Mr Blue]│ │
│  │Logo│  (E102-Search)   │ (E103)(E104)(E105)(E106)(E107)│ │
│  │    │                  │                                │ │
│  │    │                  │  Badge: "3" on notifications   │ │
│  └────┴──────────────────┴────────────────────────────────┘ │
└──────────────────────────────────────────────────────────────┘
```

### DETAILED COMPONENT BREAKDOWN

**Left Section: Logo**
```
┌────────────────┐
│  [MT LOGO]     │
│  Mundo Tango   │
│  (E101-Logo)   │
└────────────────┘
Clickable → /feed
Size: 48x48px logo
Font: --text-lg for text
Color: --color-primary
```

**Center Section: Global Search**
```
┌─────────────────────────────────────────────┐
│  🔍  Search posts, events, people...        │
│  (E102-Topbar-Search)                       │
│  ┌─────────────────────────────────────┐   │
│  │ AUTOCOMPLETE DROPDOWN (on typing)   │   │
│  │ ┌─────────────────────────────────┐ │   │
│  │ │ 📝 Posts                        │ │   │
│  │ │   "Tango night was amazing..."  │ │   │
│  │ │   "Looking for dance partner"   │ │   │
│  │ │                                 │ │   │
│  │ │ 📅 Events                       │ │   │
│  │ │   Tango Night - Nov 1          │ │   │
│  │ │   Language Exchange - Nov 3     │ │   │
│  │ │                                 │ │   │
│  │ │ 👥 People                       │ │   │
│  │ │   Maria Rodriguez              │ │   │
│  │ │   Carlos Mendez                │ │   │
│  │ └─────────────────────────────────┘ │   │
│  └─────────────────────────────────────┘   │
└─────────────────────────────────────────────┘
```

**Right Section: Notification Bell**
```
┌──────────────────┐
│   🔔             │
│   ┌──┐           │
│   │ 3│ Badge     │
│   └──┘           │
│  (E103-Notif)    │
│                  │
│  ON CLICK:       │
│  ┌────────────────────────────────┐
│  │ NOTIFICATIONS DROPDOWN         │
│  │ max-height: 400px, scroll      │
│  │                                │
│  │ ┌────────────────────────────┐ │
│  │ │ 👤 Maria liked your post   │ │
│  │ │    2 minutes ago      [x]  │ │
│  │ │    (unread)                │ │
│  │ └────────────────────────────┘ │
│  │                                │
│  │ ┌────────────────────────────┐ │
│  │ │ 📅 Event reminder: Tango   │ │
│  │ │    Tonight at 8 PM    [x]  │ │
│  │ │    (unread)                │ │
│  │ └────────────────────────────┘ │
│  │                                │
│  │ ┌────────────────────────────┐ │
│  │ │ 💬 Carlos sent a message   │ │
│  │ │    1 hour ago         [x]  │ │
│  │ │    (read)                  │ │
│  │ └────────────────────────────┘ │
│  │                                │
│  │ [Mark all as read]             │
│  │ [View all notifications →]     │
│  └────────────────────────────────┘
└──────────────────┘
```

**User Menu Dropdown**
```
┌──────────────┐
│   👤         │
│   (E104)     │
│              │
│  ON CLICK:   │
│  ┌────────────────────────────┐
│  │ USER MENU DROPDOWN         │
│  │ ┌────────────────────────┐ │
│  │ │ 👤 John Doe            │ │
│  │ │ john@example.com       │ │
│  │ │ (Profile header)       │ │
│  │ └────────────────────────┘ │
│  │                            │
│  │ 👁️  View Profile          │
│  │ ✏️  Edit Profile           │
│  │ ⚙️  Settings               │
│  │ 💳 Subscription            │
│  │ ────────────────           │
│  │ [ADMIN ONLY SECTION]       │
│  │ 📊 Admin Dashboard         │
│  │ 🧠 ESA Mind                │
│  │ ✏️ Visual Editor           │
│  │ ────────────────           │
│  │ 🚪 Log Out                 │
│  └────────────────────────────┘
└──────────────┘
```

**Theme Toggle + Language Switcher**
```
┌────┬────┐
│ 🌙 │ 🌐 │
│(E105)(E106)
│    │    │
│Dark│ EN │
│Mode│Lang│
└────┴────┘

Theme Toggle (E105):
- Click: toggles dark/light mode
- Stores in localStorage
- Updates <html class="dark">

Language Switcher (E106):
- Click: opens 68-language dropdown
- Updates i18n context
- Persists selection
```

**Mr Blue Quick Access**
```
┌──────────────────┐
│ [💬 Mr Blue]     │
│ (E107-MrBlue)    │
│ Glassmorphic btn │
│ --color-primary  │
│                  │
│ ON CLICK:        │
│ Opens Mr Blue    │
│ chat overlay     │
│ (see section 7.2)│
└──────────────────┘
```

---

### TOPBAR STYLING (COMPLETE CSS)

```css
.topbar {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: var(--topbar-height);
  background: var(--topbar-bg);
  backdrop-filter: blur(12px);
  border-bottom: 1px solid var(--topbar-border);
  z-index: var(--z-fixed);
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 var(--space-6);
  box-shadow: var(--shadow-sm);
}

.dark .topbar {
  background: hsla(218, 70%, 15%, 0.95);
  border-bottom-color: hsla(186, 72%, 60%, 0.2);
}

.topbar-logo {
  display: flex;
  align-items: center;
  gap: var(--space-3);
  text-decoration: none;
  color: var(--text-primary);
  font-weight: var(--font-weight-bold);
  font-size: var(--text-lg);
  transition: var(--transition-base);
}

.topbar-logo:hover {
  color: var(--color-primary);
}

.topbar-logo-image {
  width: 48px;
  height: 48px;
  border-radius: var(--radius-lg);
}

.topbar-search {
  flex: 1;
  max-width: 500px;
  margin: 0 var(--space-8);
  position: relative;
}

.topbar-search-input {
  width: 100%;
  padding: var(--space-3) var(--space-4) var(--space-3) var(--space-12);
  background: white;
  border: 1px solid var(--glass-border);
  border-radius: var(--radius-full);
  font-size: var(--text-sm);
  transition: var(--transition-base);
}

.dark .topbar-search-input {
  background: hsla(218, 70%, 15%, 0.8);
  color: var(--text-ocean-primary);
  border-color: hsla(186, 72%, 60%, 0.2);
}

.topbar-search-input:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px hsla(177, 72%, 56%, 0.1);
}

.topbar-search-icon {
  position: absolute;
  left: var(--space-4);
  top: 50%;
  transform: translateY(-50%);
  color: var(--text-ocean-muted);
  font-size: var(--text-lg);
}

.topbar-actions {
  display: flex;
  align-items: center;
  gap: var(--space-4);
}

.topbar-icon-button {
  position: relative;
  width: 40px;
  height: 40px;
  border-radius: var(--radius-full);
  background: transparent;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: var(--transition-fast);
  color: var(--text-primary);
}

.dark .topbar-icon-button {
  color: var(--text-ocean-primary);
}

.topbar-icon-button:hover {
  background: hsla(177, 72%, 56%, 0.1);
  color: var(--color-primary);
}

.notification-badge {
  position: absolute;
  top: 0;
  right: 0;
  min-width: 20px;
  height: 20px;
  padding: 0 var(--space-1);
  background: var(--color-error);
  color: white;
  border-radius: var(--radius-full);
  font-size: var(--text-xs);
  font-weight: var(--font-weight-bold);
  display: flex;
  align-items: center;
  justify-content: center;
  border: 2px solid var(--topbar-bg);
}

.topbar-mr-blue-button {
  padding: var(--space-2) var(--space-4);
  background: var(--color-primary);
  color: white;
  border: none;
  border-radius: var(--radius-full);
  font-size: var(--text-sm);
  font-weight: var(--font-weight-semibold);
  display: flex;
  align-items: center;
  gap: var(--space-2);
  cursor: pointer;
  transition: var(--transition-base);
  box-shadow: var(--shadow-sm);
}

.topbar-mr-blue-button:hover {
  background: var(--color-primary-hover);
  box-shadow: var(--glow-seafoam);
  transform: translateY(-1px);
}
```

---

## 7.2 MR BLUE AI - DEDICATED CHAT INTERFACE (P60)

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: Mr Blue AI Chat                                            ║
║ ROUTE: /mr-blue (dedicated page) + Global overlay access         ║
║ AUTH: Required                                                    ║
║ LAYOUT: Full-screen chat interface with 3D avatar                ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Page Agent:**
- P60 (Mr Blue AI Page Agent)
  - Chat conversation management
  - Voice input/output coordination
  - 3D avatar animation sync
  - Context preservation
  - Multi-language support (68 languages)
  - Cost tracking display
  - Conversation history

**AI Agents (Mr Blue System - Agents #73-80):**
- A73-MrBlue-Conversational (Chat interface)
- A74-MrBlue-RoleAdapter (Context-aware responses)
- A75-MrBlue-InteractiveTour (Platform guidance)
- A76-MrBlue-SubscriptionManager (Upgrade prompts)
- A77-MrBlue-QualityValidator (Response validation)
- A78-MrBlue-LearningCoordinator (User preference learning)
- A79-MrBlue-ContextPreserver (Cross-page memory)
- A80-MrBlue-CollaborativeIntelligence (Agent coordination)

**Component Agents:**
- E120-MrBlue-3DAvatar (React Three Fiber animation)
- E121-MrBlue-ChatWindow (Message display)
- E122-MrBlue-MessageBubble-{id} (Individual messages)
- E123-MrBlue-VoiceInput (Web Speech API)
- E124-MrBlue-VoiceOutput (Text-to-Speech, 68 langs)
- E125-MrBlue-CostTracker (Token usage display)
- E126-MrBlue-ContextPanel (Current page context)

**Backend Agents:**
- B60-MrBlueAPI (POST /api/mr-blue/chat)
- B61-TTSGenerationAPI (POST /api/mr-blue/tts)

---

### MR BLUE LAYOUT (FULL SCREEN)

```
┌──────────────────────────────────────────────────────────────┐
│  TOPBAR (same as all pages)                                  │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  MR BLUE AI - YOUR PERSONAL ASSISTANT                        │
│  (Ocean gradient background with animated particles)         │
│                                                              │
│  ┌─────────────────────┬──────────────────────────────────┐ │
│  │ LEFT: 3D AVATAR     │ RIGHT: CHAT INTERFACE            │ │
│  │ (500px width)       │ (flex-1)                         │ │
│  │                     │                                  │ │
│  │  ┌───────────────┐  │  ┌────────────────────────────┐ │ │
│  │  │               │  │  │ CHAT HEADER                 │ │ │
│  │  │               │  │  │ Mr Blue AI · Online         │ │ │
│  │  │   [3D AVATAR] │  │  │ Context: Home Feed          │ │ │
│  │  │   Humanoid    │  │  │ (E126-ContextPanel)         │ │ │
│  │  │   Animated    │  │  └────────────────────────────┘ │ │
│  │  │   (E120)      │  │                                  │ │
│  │  │               │  │  ┌────────────────────────────┐ │ │
│  │  │               │  │  │ CHAT WINDOW                │ │ │
│  │  │               │  │  │ (E121-ChatWindow)          │ │ │
│  │  └───────────────┘  │  │ Scrollable message area    │ │ │
│  │                     │  │                            │ │ │
│  │  Avatar animates    │  │ ┌────────────────────────┐ │ │ │
│  │  based on:          │  │ │ Hi! I'm Mr Blue.       │ │ │
│  │  • Listening        │  │ │ How can I help you?    │ │ │
│  │  • Thinking         │  │ │ (E122-MsgBubble-1)     │ │ │
│  │  • Speaking         │  │ └────────────────────────┘ │ │ │
│  │  • Idle             │  │                            │ │ │
│  │                     │  │ ┌────────────────────────┐ │ │ │
│  │  Full animation     │  │(User) │ Show me my stats │ │ │
│  │  system with:       │  │       │ for this month   │ │ │
│  │  • Facial express.  │  │       │ (E122-MsgBubble)│ │ │
│  │  • Lip sync         │  │       └────────────────┘ │ │ │
│  │  • Gestures         │  │                            │ │ │
│  │  • Eye tracking     │  │ ┌────────────────────────┐ │ │ │
│  │                     │  │ │ [Loading with dots...] │ │ │
│  │  React Three Fiber  │  │ │ (typing indicator)     │ │ │
│  │  with GLTF model    │  │ └────────────────────────┘ │ │ │
│  │                     │  │                            │ │ │
│  │  ┌───────────────┐  │  │ [More messages...]         │ │ │
│  │  │ CONTROLS      │  │  │                            │ │ │
│  │  │ 🎙️ Voice ON   │  │  └────────────────────────────┘ │ │
│  │  │ 🔊 Audio ON   │  │                                  │ │
│  │  │ 🌐 EN (Lang)  │  │  ┌────────────────────────────┐ │ │
│  │  │ 💰 Cost: $0.12│  │  │ INPUT AREA                 │ │ │
│  │  │ (E125-Cost)   │  │  │ ┌────────────────────────┐ │ │ │
│  │  └───────────────┘  │  │ │ [🎙️] Type or speak... │ │ │ │
│  │                     │  │ │ (E123-VoiceInput)      │ │ │ │
│  │                     │  │ │ [📎] [Send]             │ │ │ │
│  │                     │  │ └────────────────────────┘ │ │ │
│  │                     │  │                            │ │ │
│  │                     │  │ Suggestions:               │ │ │
│  │                     │  │ [📊 Show stats]            │ │ │
│  │                     │  │ [🎯 Set a goal]            │ │ │
│  │                     │  │ [📅 Check events]          │ │ │
│  │                     │  └────────────────────────────┘ │ │
│  └─────────────────────┴──────────────────────────────────┘ │
└──────────────────────────────────────────────────────────────┘
```

---

### MR BLUE FEATURES

**1. Voice Input (E123-MrBlue-VoiceInput)**
```typescript
// Uses Web Speech API
const recognition = new webkitSpeechRecognition();
recognition.lang = currentLanguage; // Supports 68 languages
recognition.continuous = false;
recognition.interimResults = true;

recognition.onresult = (event) => {
  const transcript = event.results[0][0].transcript;
  sendMessage(transcript);
};

// When user clicks 🎙️ button
recognition.start();
// Avatar switches to "listening" animation
```

**2. Voice Output (E124-MrBlue-VoiceOutput)**
```typescript
// Text-to-Speech with multi-language support
const speak = async (text: string, language: string) => {
  // Backend generates TTS audio
  const audio = await fetch('/api/mr-blue/tts', {
    method: 'POST',
    body: { text, language }
  });
  
  // Play audio
  const audioPlayer = new Audio(audio.url);
  audioPlayer.play();
  
  // Sync avatar lip movements
  syncLipAnimation(audioPlayer);
};
```

**3. 3D Avatar Animation (E120-MrBlue-3DAvatar)**
```typescript
// React Three Fiber implementation
import { Canvas } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';

function MrBlueAvatar({ state }: { state: 'idle' | 'listening' | 'thinking' | 'speaking' }) {
  const { scene, animations } = useGLTF('/models/mr-blue.glb');
  const { actions } = useAnimations(animations, scene);
  
  useEffect(() => {
    actions[state]?.play();
  }, [state, actions]);
  
  return <primitive object={scene} />;
}
```

**4. Cost Tracking (E125-MrBlue-CostTracker)**
```css
.cost-tracker {
  background: var(--glass-bg);
  backdrop-filter: blur(8px);
  border: 1px solid var(--glass-border);
  border-radius: var(--radius-lg);
  padding: var(--space-3);
  font-size: var(--text-sm);
}

.cost-amount {
  font-size: var(--text-lg);
  font-weight: var(--font-weight-bold);
  color: var(--color-primary);
}
```

Display shows:
- Current session cost
- Total tokens used
- Model used (GPT-4o, Claude, etc.)
- Estimated monthly cost

---

## 7.3 VISUAL EDITOR - REPLIT-STYLE PAGE BUILDER (P37)

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: Visual Editor                                               ║
║ ROUTE: /admin/visual-editor                                      ║
║ AUTH: Super Admin only                                           ║
║ LAYOUT: Full-screen editor with panels                           ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Page Agent:**
- P37 (Visual Editor Page Agent)
  - GrapesJS coordination
  - AI code generation orchestration
  - Cost tracking & display
  - Live preview management
  - Git workflow automation
  - Component library management
  - Page export/import

**AI Agents:**
- A70-CodeGenerator (GPT-4o for code generation)
- A71-CostEstimator (Token & cost calculation)

**Component Agents:**
- E140-Editor-Canvas (GrapesJS main canvas)
- E141-Editor-Panels (Blocks, Styles, Layers panels)
- E142-Editor-Toolbar (Top toolbar with actions)
- E143-Editor-AIPrompt (AI generation prompt input)
- E144-Editor-LivePreview (Real-time preview window)
- E145-Editor-CostDisplay (AI usage cost tracker)
- E146-Editor-ComponentLibrary (Pre-built components)
- E147-Editor-ExportModal (Export options)

**Backend Agents:**
- B70-VisualEditorAPI (POST /api/visual-editor/generate)
- B71-ComponentLibraryAPI (GET /api/visual-editor/components)

---

### VISUAL EDITOR LAYOUT (FULL SCREEN)

```
┌──────────────────────────────────────────────────────────────┐
│  VISUAL EDITOR TOOLBAR (E142-Editor-Toolbar)                 │
│  ┌────────────────────────────────────────────────────────┐  │
│  │[Save] [Undo] [Redo] │ AI: [🤖 Generate...] │ [Export]│  │
│  │                      Cost: $0.45 (E145-CostDisplay)    │  │
│  └────────────────────────────────────────────────────────┘  │
└──────────────────────────────────────────────────────────────┘

┌────────┬────────────────────────────────────┬────────────────┐
│ LEFT   │  CANVAS (E140-Editor-Canvas)       │  RIGHT PANEL   │
│ PANEL  │  Main editing area                 │  (E141-Panels) │
│ (280px)│                                    │  (320px)       │
│        │                                    │                │
│ BLOCKS │  ┌──────────────────────────────┐  │  STYLE MANAGER │
│ PANEL  │  │                              │  │                │
│        │  │  [DRAG & DROP VISUAL EDITOR] │  │  Selected:     │
│ ┌────┐ │  │                              │  │  <div>         │
│ │📦  │ │  │  User can drag blocks from   │  │                │
│ │Box │ │  │  left panel to build page    │  │  ┌──────────┐ │
│ └────┘ │  │                              │  │  │Background│ │
│        │  │  ┌────────────────────────┐  │  │  │[#40E0D0] │ │
│ ┌────┐ │  │  │  Header Section        │  │  │  └──────────┘ │
│ │📝  │ │  │  │  with glassmorphic bg  │  │  │                │
│ │Text│ │  │  └────────────────────────┘  │  │  ┌──────────┐ │
│ └────┘ │  │                              │  │  │Padding   │ │
│        │  │  ┌────────────────────────┐  │  │  │[24px]    │ │
│ ┌────┐ │  │  │  Content area          │  │  │  └──────────┘ │
│ │🖼️  │ │  │  │                        │  │  │                │
│ │Img │ │  │  └────────────────────────┘  │  │  ┌──────────┐ │
│ └────┘ │  │                              │  │  │Border    │ │
│        │  │  ┌────────────────────────┐  │  │  │Radius    │ │
│ ┌────┐ │  │  │  Footer                │  │  │  │[16px]    │ │
│ │🔘  │ │  │  └────────────────────────┘  │  │  └──────────┘ │
│ │Btn │ │  │                              │  │                │
│ └────┘ │  └──────────────────────────────┘  │  LAYERS TREE   │
│        │                                    │  ┌──────────┐ │
│ ┌────┐ │  AI GENERATION PANEL              │  │▼ Body    │ │
│ │📋  │ │  ┌──────────────────────────────┐  │  │ ├─Header│ │
│ │Card│ │  │ 🤖 AI PROMPT (E143)          │  │  │ ├─Main  │ │
│ └────┘ │  │ ┌──────────────────────────┐ │  │  │ └─Footer│ │
│        │  │ │ "Create a hero section   │ │  │  └──────────┘ │
│ ┌────┐ │  │ │  with ocean gradient and │ │  │                │
│ │🎯  │ │  │ │  glassmorphic card"      │ │  │  SETTINGS      │
│ │Hero│ │  │ └──────────────────────────┘ │  │  ┌──────────┐ │
│ └────┘ │  │                              │  │  │Page      │ │
│        │  │ Model: GPT-4o                │  │  │Settings  │ │
│ [More] │  │ Estimated: $0.15             │  │  │          │ │
│ blocks │  │ [Generate Code]              │  │  │Meta tags │ │
│        │  └──────────────────────────────┘  │  │SEO       │ │
│        │                                    │  │Scripts   │ │
└────────┴────────────────────────────────────┴────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  LIVE PREVIEW TAB (E144-Editor-LivePreview)                  │
│  Toggle between Edit/Preview modes                           │
│  Real-time rendering of page as it will appear to users      │
└──────────────────────────────────────────────────────────────┘
```

---

### AI CODE GENERATION WORKFLOW

```
USER FLOW:
1. User types AI prompt in E143-Editor-AIPrompt
   "Create a pricing page with 3 tiers and MT Ocean theme"
   
2. E145-Editor-CostDisplay shows estimated cost
   Tokens: ~2,500
   Model: GPT-4o ($0.01/1K tokens)
   Estimated: $0.025
   
3. User clicks [Generate Code]
   ↓
4. POST /api/visual-editor/generate (B70)
   {
     prompt: "Create a pricing page...",
     theme: "MT Ocean",
     includeComponents: ["PricingCard", "Button"]
   }
   ↓
5. Backend calls GPT-4o (A70-CodeGenerator)
   With system prompt including:
   - MT Ocean design tokens
   - Component library reference
   - shadcn/ui components
   - React + TypeScript patterns
   ↓
6. GPT-4o generates:
   - HTML structure
   - CSS with design tokens
   - React component (optional)
   - Responsive CSS
   ↓
7. E140-Editor-Canvas injects generated code
   ↓
8. E144-Editor-LivePreview shows result
   ↓
9. User can:
   - Edit visually in GrapesJS
   - Refine with more AI prompts
   - Export as React component
   - Save to Git
```

---

### COMPONENT LIBRARY (E146)

Pre-built MT Ocean components available:

```
CARDS:
- GlassmorphicCard
- StatCard (with gradient border)
- PricingCard
- FeatureCard (with icon)
- TestimonialCard

BUTTONS:
- PrimaryButton (seafoam)
- SecondaryButton (cyan)
- OutlineButton
- IconButton
- MrBlueButton

FORMS:
- InputField (with glassmorphism)
- TextArea
- Select (custom styled)
- Checkbox
- Radio

LAYOUT:
- ThreeColumnLayout (Mundo Tango)
- TwoColumnSplit
- HeroSection (with gradient bg)
- Footer (ocean themed)

NAVIGATION:
- Topbar (complete with search)
- Sidebar (ocean gradient)
- Breadcrumb
- Tabs

SPECIALIZED:
- PostCard (feed)
- EventCard
- MessageBubble
- NotificationItem
- UserAvatar
```

Each component has:
- MT Ocean theme styling
- Dark mode support
- Responsive design
- Accessibility (WCAG 2.1 AA)

---

### EXPORT OPTIONS (E147-Editor-ExportModal)

```
When user clicks [Export]:

┌────────────────────────────────────────┐
│  EXPORT OPTIONS                        │
│                                        │
│  Format:                               │
│  ○ HTML (standalone)                   │
│  ○ React Component (.tsx)              │
│  ○ Vue Component (.vue)                │
│  ● React + TypeScript (recommended)    │
│                                        │
│  Include:                              │
│  ☑ Design tokens CSS                   │
│  ☑ Component imports                   │
│  ☑ TypeScript types                    │
│  ☑ Dark mode support                   │
│  ☐ Inline styles (no external CSS)    │
│                                        │
│  Git Integration:                      │
│  ☑ Commit to repository                │
│  Branch: [feature/new-page      ▾]    │
│  Message: [Generated pricing page]    │
│                                        │
│  [Cancel]  [Export & Download]         │
│                    [Export & Commit]   │
└────────────────────────────────────────┘
```

After export, creates file like:

```typescript
// client/src/pages/PricingPage.tsx
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

export default function PricingPage() {
  return (
    <div className="pricing-page">
      {/* Generated code with MT Ocean theme */}
      <div className="hero-section" style={{
        background: 'var(--bg-ocean-gradient)'
      }}>
        {/* ... */}
      </div>
    </div>
  );
}
```

---

=======================================================================
PART 8: LIFE CEO AGENT PAGES (16 SPECIALIZED AGENTS)
=======================================================================

## 8.1 LIFE CEO DASHBOARD (P65)

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: Life CEO Dashboard                                         ║
║ ROUTE: /life-ceo                                                 ║
║ AUTH: Required                                                    ║
║ LAYOUT: Dashboard grid with 16 agent cards                       ║
╚═══════════════════════════════════════════════════════════════════╝

### THE 16 SPECIALIZED AI AGENTS

```
┌──────────────────────────────────────────────────────────────┐
│  LIFE CEO - YOUR AI-POWERED LIFE MANAGEMENT SYSTEM           │
│  16 Specialized Agents Working for You 24/7                  │
└──────────────────────────────────────────────────────────────┘

┌─────────┬─────────┬─────────┬─────────┐
│ 💼      │ 📅      │ 💰      │ 🏋️      │
│ Career  │Calendar │ Finance │ Health  │
│ Agent   │ Agent   │ Agent   │ Agent   │
│         │         │         │         │
│ Track   │ Manage  │ Budget  │ Fitness │
│ goals   │ schedule│ optimize│ tracking│
├─────────┼─────────┼─────────┼─────────┤
│ 🎓      │ 🏠      │ 🚗      │ ✈️      │
│ Learning│ Home    │ Auto    │ Travel  │
│ Agent   │ Agent   │ Agent   │ Agent   │
│         │         │         │         │
│ Courses │ Chores  │ Maint.  │ Plans   │
│ & skills│ & bills │ & docs  │ & tips  │
├─────────┼─────────┼─────────┼─────────┤
│ 👥      │ 🎯      │ 📊      │ 🛒      │
│ Social  │ Goals   │ Habits  │Shopping │
│ Agent   │ Agent   │ Agent   │ Agent   │
│         │         │         │         │
│ Network │ Track   │ Build   │ Compare │
│ & events│ progress│ routines│ & save  │
├─────────┼─────────┼─────────┼─────────┤
│ 📖      │ 🎨      │ 💼      │ 🧘      │
│ Reading │Creative │Business │Wellness │
│ Agent   │ Agent   │ Agent   │ Agent   │
│         │         │         │         │
│ Library │ Projects│ Ventures│ Mental  │
│ & goals │ & ideas │ & tasks │ health  │
└─────────┴─────────┴─────────┴─────────┘

Each card is clickable → Opens dedicated agent page
```

---

## 8.2 INDIVIDUAL AGENT PAGE LAYOUT (P66-P81)

**Example: Career Agent (P66)**

```
┌──────────────────────────────────────────────────────────────┐
│  💼 CAREER AGENT - AI Career Coach                          │
└──────────────────────────────────────────────────────────────┘

┌────────┬────────────────────────────────┬──────────────────┐
│ SIDEBAR│  MAIN CONTENT                  │  AI ASSISTANT    │
│        │                                │  (Mr Blue mode)  │
│ Quick  │  ┌──────────────────────────┐  │                  │
│ Actions│  │ CAREER SUMMARY           │  │  💬 Ask me:      │
│        │  │ Current: Software Dev    │  │  "How to get     │
│ ○ Goals│  │ Target: Senior Dev       │  │   promoted?"     │
│ ○ Tasks│  │ Progress: 65%            │  │                  │
│ ○ Docs │  │ Next milestone: Q4 2025  │  │  [Chat input]    │
│ ○ Stats│  └──────────────────────────┘  │                  │
│        │                                │  Recent:         │
│ Recent:│  ┌──────────────────────────┐  │  • Resume tips   │
│ • Updated│ ACTIVE GOALS               │  │  • Interview     │
│   resume │ 1. Complete AWS cert       │  │    prep          │
│ • Interview│   Due: Nov 15            │  │  • Salary        │
│   prep   │   Progress: ████░░ 70%    │  │    negotiation   │
│          │                            │  │                  │
│          │ 2. Build portfolio project │  └──────────────────┘
│          │   Due: Dec 1               │
│          │   Progress: ██░░░░ 40%    │
│          └──────────────────────────┘
│
│          ┌──────────────────────────┐
│          │ THIS WEEK'S TASKS        │
│          │ ☐ Update LinkedIn        │
│          │ ☐ Apply to 5 jobs        │
│          │ ☐ Practice coding        │
│          │ ☑ Network event (Done)   │
│          └──────────────────────────┘
│
│          ┌──────────────────────────┐
│          │ DOCUMENTS & RESOURCES    │
│          │ 📄 Resume v3.pdf         │
│          │ 📄 Cover letter template │
│          │ 🔗 Recommended courses   │
│          │ 🔗 Salary data           │
│          └──────────────────────────┘
└────────┴────────────────────────────┴──────────────────┘
```

---

=======================================================================
PART 9: ADDITIONAL PAGES (TOTAL NOW 80+ PAGES)
=======================================================================

## 9.1 COMPLETE PAGE COUNT UPDATE

**PUBLIC PAGES (9):**
- P1-P5: Auth (Login, Register, Forgot/Reset, Logout)
- P6-P9: Marketing (Landing, About, Pricing, Contact)

**AUTHENTICATED APP PAGES (26):**
- P10-P14: Core (Feed, Explore, Search, Notifications, Settings)
- P15-P17: Profile (View, Edit, Friends)
- P18: Messages
- P19: Communities
- P20-P21: Events (List, Detail)
- P22-P24: Create pages (Post, Event, Community)
- P25-P26: Housing (Listings, Detail)
- P27: Map View
- P28: Calendar View
- P29: Subscription/Pricing
- P60: Mr Blue AI (Dedicated chat page)
- P61-P64: Life CEO pages

**LIFE CEO AGENT PAGES (17):**
- P65: Life CEO Dashboard (overview of 16 agents)
- P66-P81: Individual agent pages (Career, Calendar, Finance, Health, etc.)

**ADMIN PANEL PAGES (16):**
- P30-P45: All admin pages (Dashboard, Users, Analytics, Projects, ESA Mind, Visual Editor, etc.)

**UTILITY PAGES (5):**
- P46-P50: Error/utility pages

**TOTAL: 73+ PAGES**

(Plus component variations and modal overlays)

---

## 9.2 HOUSING MARKETPLACE (P25-P26)

### P25: Housing Listings

```
┌──────────────────────────────────────────────────────────────┐
│  🏠 HOUSING MARKETPLACE                                      │
│  Find your perfect home in Buenos Aires                     │
└──────────────────────────────────────────────────────────────┘

┌────────┬────────────────────────────────┬──────────────────┐
│ FILTERS│  LISTINGS GRID                 │  MAP VIEW        │
│        │                                │  (toggle)        │
│ Type:  │  ┌──────┐ ┌──────┐ ┌──────┐  │                  │
│ □ Apt  │  │[IMG] │ │[IMG] │ │[IMG] │  │  [Interactive    │
│ □ House│  │$800  │ │$1200 │ │$950  │  │   map with       │
│ □ Room │  │2BR   │ │3BR   │ │1BR   │  │   markers]       │
│        │  │Palermo│ │Recoleta│Belgrano│  │                  │
│ Price: │  └──────┘ └──────┘ └──────┘  │  Click marker    │
│ $[___] │                                │  → See listing   │
│ to     │  [More listings...]           │                  │
│ $[___] │                                │                  │
│        │  Glassmorphic cards            │                  │
│ Beds:  │  with hover effects            │                  │
│ [Any▾] │                                │                  │
│        │  Each card shows:              │                  │
│ Area:  │  • Photo                       │                  │
│ □ Centro│  • Price                       │                  │
│ □ Palermo│ • Bedrooms                    │                  │
│ □ Recoleta│ • Neighborhood               │                  │
│        │  • Distance to subway          │                  │
└────────┴────────────────────────────────┴──────────────────┘
```

---

## 9.3 MAP VIEW (P27)

```
┌──────────────────────────────────────────────────────────────┐
│  🗺️ INTERACTIVE MAP - Events, Housing, Users                │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  FULL SCREEN LEAFLET.JS MAP                                  │
│  100% CDN-free, OpenStreetMap tiles                          │
│                                                              │
│  ┌────────────────────────────────────────────────────────┐ │
│  │                                                        │ │
│  │    [Interactive map of Buenos Aires]                  │ │
│  │                                                        │ │
│  │    Markers:                                            │ │
│  │    📍 Red = Events                                     │ │
│  │    🏠 Blue = Housing                                   │ │
│  │    👤 Green = Users/Communities                        │ │
│  │                                                        │ │
│  │    Click marker → Popup with:                          │ │
│  │    ┌─────────────────────────┐                        │ │
│  │    │ 📅 Tango Night          │                        │ │
│  │    │ Nov 1, 8 PM             │                        │ │
│  │    │ La Catedral             │                        │ │
│  │    │ [View Details →]        │                        │ │
│  │    └─────────────────────────┘                        │ │
│  │                                                        │ │
│  │    Controls:                                           │ │
│  │    [+] [-] Zoom                                        │ │
│  │    [📍] My location                                    │ │
│  │    [🔍] Search place                                   │ │
│  │    [☰] Layer toggle (Events/Housing/Users)            │ │
│  │                                                        │ │
│  └────────────────────────────────────────────────────────┘ │
└──────────────────────────────────────────────────────────────┘
```

---

=======================================================================
PART 10: SUMMARY & INDEX
=======================================================================

## COMPLETE PAGE INDEX (80+ PAGES)

### PUBLIC (9 pages)
P1-P5: Authentication
P6-P9: Marketing

### APP (26 pages)
P10-P29: Core app features
P60: Mr Blue AI
P61-P64: Life CEO support

### LIFE CEO (17 pages)
P65: Dashboard
P66-P81: 16 Agent pages

### ADMIN (16 pages)
P30-P45: Admin panel

### UTILITY (5 pages)
P46-P50: Errors/legal

### GLOBAL COMPONENTS (Always visible)
- E100-E107: Topbar Navigation
- Sidebar (on applicable pages)
- Mr Blue Quick Access
- Footer

---

## THEME CUSTOMIZATION QUICK REFERENCE

**One file to rule them all:**
`client/src/styles/design-tokens.css`

**Change entire theme:**
```css
:root {
  --ocean-seafoam-400: hsl(YOUR_HUE, 72%, 56%);
  --ocean-cyan-400: hsl(YOUR_HUE+30, 100%, 56%);
  --ocean-teal-500: hsl(YOUR_HUE-20, 100%, 34%);
}
```

**ALL 80+ pages update automatically!**

---

END OF EXPANDED COMPLETE PAGE LAYOUT REPORT
Generated: October 31, 2025 (Expanded v2)
Method: MB.MD (Simultaneously, Recursively, Critically)
Total Pages: 80+ documented
New additions: Topbar, Mr Blue, Visual Editor, Life CEO agents, Map View


=======================================================================
PART 11: MARKETING & HR AGENT SYSTEMS
=======================================================================

## 11.1 MARKETING AGENTS (5 SPECIALIZED AGENTS)

### Marketing Agent Team Structure

**AGENT M1: BrandArchitect.Agent**
- Platform brand strategy
- Voice & tone guidelines
- Visual identity consistency
- MT Ocean theme evolution
- Community positioning
- Target audience segmentation

**AGENT M2: ContentFunnel.Agent**
- Content calendar management
- Multi-channel content creation
- SEO optimization
- Landing page optimization
- Conversion rate optimization
- A/B testing coordination

**AGENT M3: CommunityStoryteller.Agent**
- User success stories
- Community highlights
- Event coverage
- Social media content
- Video/photo content curation
- Influencer collaboration

**AGENT M4: OSSEvangelist.Agent**
- Open-source advocacy
- Developer community engagement
- GitHub presence management
- Technical blog posts
- Conference/meetup presence
- Platform transparency communications

**AGENT M5: Analytics.Agent**
- Marketing funnel analytics
- Campaign performance tracking
- User acquisition metrics
- Conversion tracking
- ROI analysis
- Growth forecasting

---

## 11.2 HR & TALENT AGENTS (5 SPECIALIZED AGENTS)

### HR Agent Team Structure

**AGENT H1: VolunteerArchitect.Agent**
- Volunteer program design
- Task creation & categorization
- Skill requirement mapping
- Recognition systems
- Contributor pathways
- Community building

**AGENT H2: ATS.Agent (Applicant Tracking System)**
- Resume parsing & analysis
- Skill extraction
- Experience matching
- Task recommendation engine
- Application pipeline management
- Interview scheduling

**AGENT H3: OrgPsych.Agent (Organizational Psychology)**
- Team dynamics optimization
- Contributor motivation analysis
- Burnout prevention
- Recognition strategy
- Culture development
- Onboarding experience design

**AGENT H4: Governance.Agent**
- Contributor guidelines
- Code of conduct enforcement
- Conflict resolution
- Decision-making processes
- Transparency protocols
- Audit & compliance

**AGENT H5: UXHiring.Agent**
- Contributor experience optimization
- Application UX design
- Onboarding flow improvement
- Feedback collection
- Retention strategies
- Success metrics tracking

=======================================================================
PART 12: MARKETING PAGE - MUNDO TANGO PLATFORM (P7 - UPDATED)
=======================================================================

## 12.1 MARKETING PAGE LAYOUT (UPDATED FOR MT PLATFORM)

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: Marketing - About Mundo Tango Platform                     ║
║ ROUTE: /about or /marketing                                      ║
║ AUTH: Public                                                      ║
║ LAYOUT: Multi-section marketing page with platform focus         ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Page Agent:**
- P7 (Marketing Page Agent)

**Marketing Agents:**
- M1-BrandArchitect (Brand consistency)
- M2-ContentFunnel (Content optimization)
- M3-CommunityStoryteller (Success stories)
- M4-OSSEvangelist (Platform transparency)
- M5-Analytics (Conversion tracking)

**Component Agents:**
- E160-Marketing-Hero
- E161-Marketing-PlatformFeatures
- E162-Marketing-MrBlueShowcase
- E163-Marketing-TalentMatchCTA
- E164-Marketing-AutomationShowcase
- E165-Marketing-CommunityStats
- E166-Marketing-JoinCTA

---

### MARKETING PAGE LAYOUT (MT OCEAN THEME)

```
┌──────────────────────────────────────────────────────────────┐
│  SECTION 1: HERO (E160-Marketing-Hero)                      │
│  background: var(--bg-ocean-gradient)                        │
│  min-height: 100vh                                           │
│                                                              │
│  ┌────────────────────────────────────┐                     │
│  │  MUNDO TANGO PLATFORM              │                     │
│  │  Where Tango Meets Technology      │                     │
│  │  (--text-5xl, white, bold)         │                     │
│  └────────────────────────────────────┘                     │
│                                                              │
│  Share memories, discover events, and help build            │
│  the future of tango with AI-powered features               │
│  (--text-xl, --text-ocean-secondary)                        │
│                                                              │
│  ┌──────────────┐  ┌──────────────┐  ┌──────────────┐      │
│  │ Join Platform│  │ Meet Mr Blue │  │ Contribute   │      │
│  │ (primary)    │  │ (outline)    │  │ (outline)    │      │
│  └──────────────┘  └──────────────┘  └──────────────┘      │
│                                                              │
│  [Animated 3D illustration of platform features]            │
│                                                              │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  SECTION 2: PLATFORM FEATURES (E161-Marketing-Platform)      │
│  background: white / dark:--ocean-teal-900                  │
│  padding: --space-20 0                                      │
│                                                              │
│            One Platform, Infinite Possibilities              │
│            (--text-4xl, centered)                           │
│                                                              │
│  ┌────────┐  ┌────────┐  ┌────────┐  ┌────────┐           │
│  │  🌐    │  │  📅    │  │  💬    │  │  🏠    │           │
│  │Social  │  │Events  │  │Messages│  │Housing │           │
│  │Network │  │Discover│  │Real-   │  │Market  │           │
│  │        │  │        │  │time    │  │        │           │
│  │Connect │  │Find    │  │Chat    │  │Find    │           │
│  │with    │  │tango   │  │with    │  │homes   │           │
│  │dancers │  │events  │  │friends │  │abroad  │           │
│  └────────┘  └────────┘  └────────┘  └────────┘           │
│                                                              │
│  ┌────────┐  ┌────────┐  ┌────────┐  ┌────────┐           │
│  │  🗺️    │  │  👥    │  │  📊    │  │  🌍    │           │
│  │Map View│  │Communi-│  │Life CEO│  │Global  │           │
│  │        │  │ties    │  │Agents  │  │Connect │           │
│  │Explore │  │Join    │  │16 AI   │  │68 Lang-│           │
│  │cities  │  │groups  │  │helpers │  │uages   │           │
│  └────────┘  └────────┘  └────────┘  └────────┘           │
│                                                              │
│  (Glassmorphic cards with hover effects)                    │
│                                                              │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  SECTION 3: MR BLUE AI SHOWCASE (E162-Marketing-MrBlue)     │
│  background: var(--ocean-seafoam-50)                        │
│  padding: --space-16 0                                      │
│                                                              │
│  ┌───────────────┬──────────────────────────────────────┐   │
│  │ LEFT: 3D      │ RIGHT: FEATURES                      │   │
│  │ Avatar Demo   │                                      │   │
│  │               │  Meet Mr Blue - Your AI Companion    │   │
│  │ [Animated     │  (--text-3xl)                        │   │
│  │  Mr Blue      │                                      │   │
│  │  3D model]    │  🎤 Voice commands in 68 languages   │   │
│  │               │  🧠 Context-aware assistance         │   │
│  │ (Interactive  │  💡 Smart suggestions                │   │
│  │  preview)     │  📊 Life management insights         │   │
│  │               │  🔒 Privacy-first design             │   │
│  │               │                                      │   │
│  │               │  ┌────────────────────────────┐      │   │
│  │               │  │ "Ask me anything about     │      │   │
│  │               │  │  tango events, plan your   │      │   │
│  │               │  │  trip, or manage your life"│      │   │
│  │               │  │  - Mr Blue                 │      │   │
│  │               │  └────────────────────────────┘      │   │
│  │               │                                      │   │
│  │               │  [Try Mr Blue Now →]                 │   │
│  └───────────────┴──────────────────────────────────────┘   │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  SECTION 4: TALENT MATCH AI (E163-Marketing-TalentMatch)    │
│  background: white / dark:--ocean-teal-900                  │
│  padding: --space-20 0                                      │
│                                                              │
│            Help Build Mundo Tango                            │
│            (--text-4xl, centered)                           │
│                                                              │
│  ┌──────────────────────────────────────────────────────┐   │
│  │  TALENT MATCH AI - Resume-Powered Volunteering       │   │
│  │  (Glassmorphic section with gradient border)         │   │
│  │                                                      │   │
│  │  ┌───────┐     ┌───────┐     ┌───────┐             │   │
│  │  │  📄   │  →  │  🤖   │  →  │  ✅   │             │   │
│  │  │Upload │     │AI Finds│     │Start  │             │   │
│  │  │Resume │     │Perfect │     │Contrib│             │   │
│  │  │       │     │Tasks   │     │uting  │             │   │
│  │  └───────┘     └───────┘     └───────┘             │   │
│  │                                                      │   │
│  │  How it works:                                       │   │
│  │  1. Upload your resume or LinkedIn                   │   │
│  │  2. AI analyzes your skills & interests              │   │
│  │  3. Get matched to meaningful tasks                  │   │
│  │  4. Contribute and earn recognition                  │   │
│  │                                                      │   │
│  │  Current opportunities:                              │   │
│  │  • Frontend Development (React/TypeScript)           │   │
│  │  • Backend API (Node.js/PostgreSQL)                  │   │
│  │  • UI/UX Design (Figma/MT Ocean theme)              │   │
│  │  • Content Writing (Blog/Documentation)              │   │
│  │  • Community Management (Social/Events)              │   │
│  │                                                      │   │
│  │  ┌──────────────────────────┐                       │   │
│  │  │ [Upload Resume & Start →]│                       │   │
│  │  └──────────────────────────┘                       │   │
│  └──────────────────────────────────────────────────────┘   │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  SECTION 5: AUTOMATION SHOWCASE (E164-Marketing-Automation)  │
│  background: var(--ocean-teal-900) with stars animation    │
│  color: white                                                │
│  padding: --space-16 0                                      │
│                                                              │
│            Smart Automation - It Just Works                  │
│            (--text-4xl, centered, white)                    │
│                                                              │
│  Our platform automatically handles the details:             │
│                                                              │
│  ┌────────────────────────────────────────────────────────┐ │
│  │ AUTOMATION CARDS (grid, 3 columns)                     │ │
│  │                                                        │ │
│  │ ┌──────────────────┐  ┌──────────────────┐            │ │
│  │ │ 🌆 New City      │  │ 📅 Event RSVP    │  ...       │ │
│  │ │                  │  │                  │            │ │
│  │ │ Join from Buenos │  │ RSVP to event →  │            │ │
│  │ │ Aires?           │  │ Auto-add to      │            │ │
│  │ │ → Auto-create    │  │ calendar         │            │ │
│  │ │   city group     │  │ → Reminder 1h    │            │ │
│  │ │ → Connect locals │  │   before         │            │ │
│  │ │ → Find events    │  │ → Share location │            │ │
│  │ └──────────────────┘  └──────────────────┘            │ │
│  │                                                        │ │
│  │ ┌──────────────────┐  ┌──────────────────┐            │ │
│  │ │ 💬 New Message   │  │ 👤 Friend Request│  ...       │ │
│  │ │                  │  │                  │            │ │
│  │ │ Receive message  │  │ Get friend       │            │ │
│  │ │ → Push notif     │  │ request          │            │ │
│  │ │ → Email (if away)│  │ → Check mutual   │            │ │
│  │ │ → Read receipt   │  │   friends        │            │ │
│  │ └──────────────────┘  └──────────────────┘            │ │
│  │                                                        │ │
│  │ ┌──────────────────┐  ┌──────────────────┐            │ │
│  │ │ 🎯 Goal Progress │  │ 🏠 Housing Match │  ...       │ │
│  │ │                  │  │                  │            │ │
│  │ │ Complete task    │  │ Search for apt   │            │ │
│  │ │ → Update %       │  │ → AI suggestions │            │ │
│  │ │ → Celebrate      │  │ → Price alerts   │            │ │
│  │ │ → Next task      │  │ → Saved searches │            │ │
│  │ └──────────────────┘  └──────────────────┘            │ │
│  └────────────────────────────────────────────────────────┘ │
│                                                              │
│  All powered by n8n workflow automation                      │
│                                                              │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  SECTION 6: COMMUNITY STATS (E165-Marketing-Stats)          │
│  background: white / dark:--ocean-teal-900                  │
│  padding: --space-16 0                                      │
│                                                              │
│            Join a Thriving Community                         │
│            (--text-4xl, centered)                           │
│                                                              │
│  ┌─────────┬─────────┬─────────┬─────────┐                 │
│  │  1,234  │   567   │   89    │   45    │                 │
│  │  Users  │  Events │ Cities  │ Countries│                 │
│  │  Active │ Monthly │ Global  │Worldwide │                 │
│  └─────────┴─────────┴─────────┴─────────┘                 │
│  (Large animated numbers with gradient text)                │
│                                                              │
│  ┌──────────────────────────────────────────────────────┐   │
│  │ SUCCESS STORIES (Carousel)                           │   │
│  │                                                      │   │
│  │ "Found my dance partner in Berlin through MT!"      │   │
│  │ - Maria, Buenos Aires                                │   │
│  │                                                      │   │
│  │ "Mr Blue helped me plan my 3-month tango tour"      │   │
│  │ - Carlos, Madrid                                     │   │
│  │                                                      │   │
│  │ "Contributing code feels rewarding with Talent Match"│   │
│  │ - Ana, San Francisco                                 │   │
│  └──────────────────────────────────────────────────────┘   │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  SECTION 7: FINAL CTA (E166-Marketing-JoinCTA)              │
│  background: var(--bg-ocean-gradient)                        │
│  padding: --space-20                                        │
│  color: white                                                │
│                                                              │
│       Ready to Join the Tango Revolution?                    │
│       (--text-4xl, white, bold)                             │
│                                                              │
│  Start connecting, discovering, and contributing today       │
│                                                              │
│  ┌──────────────────┐  ┌──────────────────┐                │
│  │ Create Account   │  │ Become Contributor│                │
│  │ (large button)   │  │ (outline button) │                │
│  └──────────────────┘  └──────────────────┘                │
│                                                              │
│  Free to join • No credit card required • Open source        │
│                                                              │
└──────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────┐
│  FOOTER (same as landing page)                              │
│  Links: About, Pricing, Contact, Blog, Volunteer, GitHub    │
│  Socials: Facebook, Instagram, Twitter, LinkedIn            │
│  © 2025 Mundo Tango. Open source with ❤️                   │
└──────────────────────────────────────────────────────────────┘
```

=======================================================================
PART 13: TALENT MATCH AI / RESUME AI SYSTEM (P82)
=======================================================================

## 13.1 TALENT MATCH - AI-POWERED VOLUNTEER MATCHING

╔═══════════════════════════════════════════════════════════════════╗
║ PAGE: Talent Match - Resume AI                                   ║
║ ROUTE: /talent-match or /volunteer                              ║
║ AUTH: Required (MT account)                                      ║
║ LAYOUT: Multi-step wizard with AI clarifier                     ║
╚═══════════════════════════════════════════════════════════════════╝

### AGENTS INVOLVED

**Page Agent:**
- P82 (Talent Match Page Agent)

**HR Agents:**
- H1-VolunteerArchitect (Task creation)
- H2-ATS (Resume parsing & matching)
- H3-OrgPsych (Motivation analysis)
- H4-Governance (Guidelines enforcement)
- H5-UXHiring (Experience optimization)

**AI Agents:**
- A85-ResumeParser (Extract skills & experience)
- A86-ClarifierAI (Interactive interview)
- A87-TaskMatcher (Skill-to-task matching)
- A88-SignalDetection (Technology signal extraction)

**Component Agents:**
- E170-TalentMatch-UploadZone
- E171-TalentMatch-ClarifierChat
- E172-TalentMatch-TaskRecommendations
- E173-TalentMatch-TaskCard
- E174-TalentMatch-ApplyButton
- E175-TalentMatch-ProfileView

**Backend Agents:**
- B80-TalentMatchAPI
- B81-ResumeParsingAPI
- B82-ClarifierAPI
- B83-TaskMatchingAPI

---

### TALENT MATCH FLOW (MULTI-STEP WIZARD)

```
STEP 1: UPLOAD RESUME
┌──────────────────────────────────────────────────────────────┐
│  🎯 TALENT MATCH - Find Your Perfect Contribution            │
│                                                              │
│  ┌────────────────────────────────────────────────────────┐ │
│  │ UPLOAD ZONE (E170-TalentMatch-UploadZone)             │ │
│  │                                                        │ │
│  │  ┌──────────────────────────────────────────────┐     │ │
│  │  │                                              │     │ │
│  │  │  📄 Drag & Drop Your Resume                  │     │ │
│  │  │     or click to browse                       │     │ │
│  │  │                                              │     │ │
│  │  │  Supported: PDF, DOCX, TXT                   │     │ │
│  │  │  Max size: 5MB                               │     │ │
│  │  │                                              │     │ │
│  │  │  [Browse Files]                              │     │ │
│  │  │                                              │     │ │
│  │  └──────────────────────────────────────────────┘     │ │
│  │                                                        │ │
│  │  OR                                                    │ │
│  │                                                        │ │
│  │  ┌──────────────────────────────────────────────┐     │ │
│  │  │ 🔗 Paste LinkedIn URL                        │     │ │
│  │  │ [________________________________]           │     │ │
│  │  └──────────────────────────────────────────────┘     │ │
│  │                                                        │ │
│  │  OR                                                    │ │
│  │                                                        │ │
│  │  ┌──────────────────────────────────────────────┐     │ │
│  │  │ 💼 GitHub Profile URL                        │     │ │
│  │  │ [________________________________]           │     │ │
│  │  └──────────────────────────────────────────────┘     │ │
│  │                                                        │ │
│  │  [Continue to AI Interview →]                         │ │
│  └────────────────────────────────────────────────────────┘ │
│                                                              │
│  Why we need your resume:                                    │
│  • Match you to tasks that fit your skills                   │
│  • Understand your experience level                          │
│  • Recommend appropriate time commitments                    │
│  • Build your contributor profile                            │
│                                                              │
│  🔒 Your data is private and never shared                    │
└──────────────────────────────────────────────────────────────┘
```

```
STEP 2: MR BLUE AI CLARIFIER INTERVIEW
┌──────────────────────────────────────────────────────────────┐
│  💬 MR BLUE AI - Let's Find Your Perfect Match              │
│  Your Personal AI Assistant conducting the interview         │
│                                                              │
│  ┌────────────────────────────────────────────────────────┐ │
│  │ CHAT INTERFACE (E171-TalentMatch-ClarifierChat)       │ │
│  │ Similar to Mr Blue chat layout                        │ │
│  │                                                        │ │
│  │ ┌────────────────────────────────────────────┐        │ │
│  │ │ 💬 Mr Blue: I've analyzed your resume.    │        │ │
│  │ │     I see you have experience with:        │        │ │
│  │ │     • React & TypeScript (3 years)         │        │ │
│  │ │     • Node.js backend (2 years)            │        │ │
│  │ │     • PostgreSQL databases (2 years)       │        │ │
│  │ │                                            │        │ │
│  │ │     Which area interests you most for      │        │ │
│  │ │     contributing to Mundo Tango?           │        │ │
│  │ │                                            │        │ │
│  │ │     [Frontend] [Backend] [Database]        │        │ │
│  │ │     [Full Stack] [Something else]          │        │ │
│  │ └────────────────────────────────────────────┘        │ │
│  │                                                        │ │
│  │ ┌────────────────────────────────────────────┐        │ │
│  │(User) │ I'd love to work on frontend         │        │ │
│  │        └────────────────────────────────────┘        │ │
│  │                                                        │ │
│  │ ┌────────────────────────────────────────────┐        │ │
│  │ │ 💬 Mr Blue: Great choice! A few more       │        │ │
│  │ │     questions to find the perfect match:   │        │ │
│  │ │                                            │        │ │
│  │ │     1. How many hours per week can you     │        │ │
│  │ │        commit?                             │        │ │
│  │ │        [2-5] [5-10] [10-20] [20+]         │        │ │
│  │ │                                            │        │ │
│  │ │     2. What timeframe works for you?       │        │ │
│  │ │        [1 month] [3 months] [6+ months]   │        │ │
│  │ │        [Ongoing]                           │        │ │
│  │ │                                            │        │ │
│  │ │     3. Any specific features you'd like    │        │ │
│  │ │        to work on?                         │        │ │
│  │ │        [Type here...]                      │        │ │
│  │ └────────────────────────────────────────────┘        │ │
│  │                                                        │ │
│  │ [Typing area with suggestions...]                     │ │
│  └────────────────────────────────────────────────────────┘ │
└──────────────────────────────────────────────────────────────┘
```

```
STEP 3: TASK RECOMMENDATIONS
┌──────────────────────────────────────────────────────────────┐
│  ✨ PERFECT MATCHES - Tasks Just for You                    │
│                                                              │
│  Based on your skills and preferences:                       │
│                                                              │
│  ┌────────────────────────────────────────────────────────┐ │
│  │ RECOMMENDED TASKS (E172-TalentMatch-TaskRecommendations)│ │
│  │                                                        │ │
│  │ ┌──────────────────────────────────────────────────┐  │ │
│  │ │ TASK CARD #1 (E173-TalentMatch-TaskCard)        │  │ │
│  │ │ ┌────────────────────────────────────────────┐   │  │ │
│  │ │ │ 🎨 Build Profile Edit Page Component       │   │  │ │
│  │ │ │                                            │   │  │ │
│  │ │ │ Domain: Frontend Development               │   │  │ │
│  │ │ │ Phase: Phase 9 - Frontend Development      │   │  │ │
│  │ │ │ Est. Hours: 6-8 hours                      │   │  │ │
│  │ │ │                                            │   │  │ │
│  │ │ │ Why this matches you:                      │   │  │ │
│  │ │ │ ✓ Uses React (your strength)               │   │  │ │
│  │ │ │ ✓ TypeScript experience needed             │   │  │ │
│  │ │ │ ✓ Fits your 5-10 hours/week                │   │  │ │
│  │ │ │ ✓ Component-based (your interest)          │   │  │ │
│  │ │ │                                            │   │  │ │
│  │ │ │ What you'll learn:                         │   │  │ │
│  │ │ │ • MT Ocean design system                   │   │  │ │
│  │ │ │ • React Hook Form                          │   │  │ │
│  │ │ │ • shadcn/ui components                     │   │  │ │
│  │ │ │                                            │   │  │ │
│  │ │ │ [Apply for This Task]  [Learn More]       │   │  │ │
│  │ │ │ (E174-ApplyButton)                         │   │  │ │
│  │ │ └────────────────────────────────────────────┘   │  │ │
│  │ └──────────────────────────────────────────────────┘  │ │
│  │                                                        │ │
│  │ ┌──────────────────────────────────────────────────┐  │ │
│  │ │ TASK CARD #2                                     │  │ │
│  │ │ ┌────────────────────────────────────────────┐   │  │ │
│  │ │ │ 🎯 Implement Event Card Hover Effects      │   │  │ │
│  │ │ │                                            │   │  │ │
│  │ │ │ Domain: Frontend Development               │   │  │ │
│  │ │ │ Phase: Phase 9                             │   │  │ │
│  │ │ │ Est. Hours: 3-4 hours                      │   │  │ │
│  │ │ │                                            │   │  │ │
│  │ │ │ Why this matches you:                      │   │  │ │
│  │ │ │ ✓ CSS animations (your GitHub shows this) │   │  │ │
│  │ │ │ ✓ React components                         │   │  │ │
│  │ │ │ ✓ Quick task to start                      │   │  │ │
│  │ │ │                                            │   │  │ │
│  │ │ │ [Apply for This Task]  [Learn More]       │   │  │ │
│  │ │ └────────────────────────────────────────────┘   │  │ │
│  │ └──────────────────────────────────────────────────┘  │ │
│  │                                                        │ │
│  │ [Show 3 more tasks...]                                │ │
│  └────────────────────────────────────────────────────────┘ │
│                                                              │
│  Not seeing what you want?                                   │
│  [Browse All Tasks] [Refine Preferences]                    │
└──────────────────────────────────────────────────────────────┘
```

---

### SIGNAL DETECTION ALGORITHM (A88-SignalDetection)

```typescript
// How AI extracts technology signals from resume

interface TechSignal {
  technology: string;
  confidence: number; // 0-1
  context: string;
  yearsExperience?: number;
  relatedAgent: string; // Which ESA agent this maps to
}

const SIGNAL_PATTERNS = {
  backend: [
    'node', 'express', 'fastify', 'api', 'rest', 'graphql',
    'python', 'django', 'flask', 'java', 'spring'
  ],
  frontend: [
    'react', 'vue', 'angular', 'typescript', 'javascript',
    'html', 'css', 'tailwind', 'ui', 'ux', 'figma'
  ],
  database: [
    'sql', 'postgresql', 'mysql', 'mongodb', 'database',
    'schema', 'migration', 'drizzle', 'prisma'
  ],
  security: [
    'security', 'auth', 'jwt', 'oauth', 'encryption',
    'rls', 'rbac', 'compliance', 'audit'
  ],
  devops: [
    'docker', 'k8s', 'kubernetes', 'ci/cd', 'github actions',
    'deployment', 'aws', 'gcp', 'azure'
  ]
};

const AGENT_MAPPING = {
  backend: 'BackendDevelopment.Agent',
  frontend: 'FrontendDevelopment.Agent',
  database: 'DatabaseDesign.Agent',
  security: 'Security.Agent',
  devops: 'Deployment.Agent',
  // ... 21 total agents from ESA
};

function detectSignals(resumeText: string): TechSignal[] {
  const signals: TechSignal[] = [];
  const lowerText = resumeText.toLowerCase();
  
  for (const [domain, keywords] of Object.entries(SIGNAL_PATTERNS)) {
    for (const keyword of keywords) {
      const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
      const matches = lowerText.match(regex);
      
      if (matches) {
        signals.push({
          technology: keyword,
          confidence: matches.length / 10, // More mentions = higher confidence
          context: domain,
          relatedAgent: AGENT_MAPPING[domain]
        });
      }
    }
  }
  
  return signals;
}
```

---

### TASK MATCHING ALGORITHM (A87-TaskMatcher)

```typescript
// How AI matches users to tasks

interface Task {
  id: string;
  title: string;
  domain: string; // 'frontend', 'backend', etc.
  phase: string; // 'Phase 9', etc.
  hours: number;
  requiredSkills: string[];
  learningOpportunities: string[];
  agent: string; // ESA agent
}

interface UserProfile {
  signals: TechSignal[];
  hoursPerWeek: number;
  timeframe: string;
  interests: string[];
}

function matchTasks(
  user: UserProfile,
  allTasks: Task[]
): Array<Task & { score: number; reasons: string[] }> {
  
  const matches = allTasks.map(task => {
    let score = 0;
    const reasons: string[] = [];
    
    // 1. Skill match (40% weight)
    const skillMatch = task.requiredSkills.filter(skill =>
      user.signals.some(sig => 
        sig.technology.includes(skill.toLowerCase())
      )
    );
    score += (skillMatch.length / task.requiredSkills.length) * 40;
    if (skillMatch.length > 0) {
      reasons.push(`Uses ${skillMatch.join(', ')} (your strength)`);
    }
    
    // 2. Time commitment match (30% weight)
    if (task.hours <= user.hoursPerWeek * 2) {
      score += 30;
      reasons.push(`Fits your ${user.hoursPerWeek} hours/week`);
    }
    
    // 3. Interest match (20% weight)
    if (user.interests.includes(task.domain)) {
      score += 20;
      reasons.push(`Matches your ${task.domain} interest`);
    }
    
    // 4. Learning opportunity (10% weight)
    if (task.learningOpportunities.length > 0) {
      score += 10;
      reasons.push(`Learn: ${task.learningOpportunities[0]}`);
    }
    
    return { ...task, score, reasons };
  });
  
  // Sort by score, return top 5
  return matches
    .sort((a, b) => b.score - a.score)
    .slice(0, 5);
}
```

=======================================================================
PART 14: H2AC - HUMAN-TO-AGENT COMMUNICATION FRAMEWORK
=======================================================================

## 14.1 H2AC SYSTEM OVERVIEW

**H2AC (Human-to-Agent Communication)** is the framework that enables seamless interaction between users and the 105+ AI agents powering Mundo Tango.

### Core Components

**1. Universal Agent Interface**
- Standardized communication protocol
- Natural language understanding
- Context preservation across conversations
- Multi-modal input (text, voice, visual)

**2. Agent Registry & Router**
- Maps user intent to appropriate agent(s)
- Multi-agent coordination
- Escalation paths
- Fallback handling

**3. Context Manager**
- User session state
- Conversation history
- Page/feature context
- Personal preferences

**4. Feedback Loop**
- User satisfaction tracking
- Agent performance metrics
- Continuous learning
- Error recovery

---

### H2AC ARCHITECTURE

```
USER INPUT
  ↓
┌─────────────────────────────────────────┐
│ H2AC INTERFACE LAYER                    │
│ • Parse natural language                │
│ • Detect intent                         │
│ • Extract entities                      │
│ • Determine context                     │
└─────────────────────────────────────────┘
  ↓
┌─────────────────────────────────────────┐
│ AGENT ROUTER                            │
│ • Match intent to agent(s)              │
│ • Check agent availability              │
│ • Load agent capabilities               │
│ • Coordinate multi-agent tasks          │
└─────────────────────────────────────────┘
  ↓
┌─────────────────────────────────────────┐
│ AGENT EXECUTION                         │
│ • Agent processes request               │
│ • Access relevant data/APIs             │
│ • Generate response                     │
│ • Update context                        │
└─────────────────────────────────────────┘
  ↓
┌─────────────────────────────────────────┐
│ RESPONSE FORMATTER                      │
│ • Format for UI presentation            │
│ • Add interactive elements              │
│ • Include follow-up suggestions         │
│ • Track user satisfaction               │
└─────────────────────────────────────────┘
  ↓
USER OUTPUT
```

---

### H2AC COMMUNICATION PATTERNS

**Pattern 1: Simple Query**
```
User: "What events are happening this weekend?"
  ↓
H2AC Router: → Events.Agent (A20)
  ↓
Response: [List of 5 events with dates, locations, RSVPs]
  ↓
Follow-up: "Would you like to RSVP to any?"
```

**Pattern 2: Multi-Agent Coordination**
```
User: "Plan my trip to Buenos Aires in November"
  ↓
H2AC Router: → Travel.Agent (P73) + Housing.Agent (P71) + Events.Agent
  ↓
Travel.Agent: Suggests flights, visa info
Housing.Agent: Finds apartments near events
Events.Agent: Lists November tango festivals
  ↓
Response: Comprehensive trip plan with all details
```

**Pattern 3: Context-Aware Assistance**
```
User on Event Detail Page: "How do I get there?"
  ↓
H2AC Context: Current page = Event #123 (Tango Night)
H2AC Router: → Map.Agent + Transport.Agent
  ↓
Response: Directions from user's location to event venue
```

**Pattern 4: Task Delegation**
```
User: "Add this to my calendar and remind me 1 hour before"
  ↓
H2AC Router: → Calendar.Agent (P67) + Notification.Agent
  ↓
Calendar.Agent: Creates calendar entry
Notification.Agent: Sets reminder
  ↓
Response: "Added to calendar. You'll get a reminder at 7 PM."
```

---

### H2AC AGENT TYPES IN MUNDO TANGO

**Page Agents (P1-P82)**
- Manage specific pages/features
- Handle UI interactions
- Coordinate with feature agents

**Feature Agents (F1-F100)**
- Cross-page functionality
- Search, notifications, etc.

**Life CEO Agents (P65-P81)**
- Personal life management
- Goal tracking, habit building

**AI Agents (A1-A88)**
- Machine learning tasks
- Natural language processing
- Pattern recognition

**Backend Agents (B1-B83)**
- API endpoints
- Database operations
- Business logic

**Marketing Agents (M1-M5)**
- Content, analytics, community

**HR Agents (H1-H5)**
- Talent matching, onboarding

---

### H2AC CONVERSATION EXAMPLES

**Example 1: Mr Blue Integration**
```
User (via voice): "Mr Blue, what's my career progress?"
  ↓
H2AC: Transcribes voice → Parses intent → Routes to Career.Agent (P66)
  ↓
Career.Agent: Retrieves user goals, completed tasks, timeline
  ↓
Response (via TTS): "You're 65% toward your Senior Dev goal. 
                     You've completed AWS certification and 
                     built 2 portfolio projects. Next up: 
                     Practice system design interviews."
  ↓
Mr Blue (3D avatar): Animates speaking + shows visual progress bar
```

**Example 2: Talent Match Integration**
```
User: "Find me tasks related to database design"
  ↓
H2AC Router: → ATS.Agent (H2) + TaskMatcher.Agent (A87)
  ↓
ATS.Agent: Checks user's resume signals for database skills
TaskMatcher.Agent: Finds tasks requiring SQL/PostgreSQL
  ↓
Response: [3 database-related tasks with match scores]
```

**Example 3: Automation Trigger**
```
User RSVPs to event (UI action)
  ↓
H2AC Event: "user.rsvp" → Automation.Agent
  ↓
Automation.Agent coordinates:
  • Calendar.Agent: Add to calendar
  • Notification.Agent: Set reminder
  • Map.Agent: Save event location
  • Social.Agent: Notify friends
  ↓
Background execution: All actions complete
User sees: "Added to calendar. Reminder set for 7 PM tomorrow."
```

---

### H2AC UI COMPONENTS

**Global H2AC Access Points:**

1. **Mr Blue Button** (always visible)
   - Quick access to conversational AI
   - Voice or text input
   - Context-aware responses

2. **Smart Search Bar** (topbar)
   - Natural language queries
   - AI-powered results
   - Agent suggestions

3. **Page-Specific Help**
   - "?" icon on every page
   - Context-aware tips
   - Agent-powered guidance

4. **Quick Actions Menu**
   - "⚡" button for common tasks
   - AI suggests relevant actions
   - One-click execution

---

=======================================================================
PART 15: COMPLETE AUTOMATION WORKFLOWS (IN-HOUSE SYSTEM)
=======================================================================

## 15.1 AUTOMATION SYSTEM ARCHITECTURE

All automations powered by **IN-HOUSE automation system** using **BullMQ** + **Node.js workers**.

### Infrastructure

**Automation Service** (server/services/automation/):
- In-house workflow orchestrator
- Event-driven architecture
- TypeScript-based workflows
- Cron scheduler for time-based triggers
- Configuration: JSON workflow definitions

**BullMQ Job Queues:**
- Email queue (Resend integration)
- Notification queue (push/in-app/SMS)
- Data processing queue (analytics, ML)
- Sync queue (external APIs)
- Automation workflow queue

**Redis:**
- Queue storage & management
- Job state persistence
- Caching layer
- Rate limiting
- Distributed locks

**Workers** (server/workers/):
- Email worker (Resend API)
- Notification worker (multi-channel)
- Data processing worker
- Automation workflow worker (executes workflows)

---

### Workflow Categories (20+ Workflows)

**A. USER LIFECYCLE AUTOMATIONS (5 workflows)**
**B. SOCIAL AUTOMATIONS (4 workflows)**
**C. EVENT AUTOMATIONS (3 workflows)**
**D. LIFE CEO AUTOMATIONS (3 workflows)**
**E. HOUSING/TRAVEL AUTOMATIONS (2 workflows)**
**F. ADMIN/SYSTEM AUTOMATIONS (3 workflows)**

---

=======================================================================
## 15.2 ALL DOCUMENTED AUTOMATION WORKFLOWS
=======================================================================

### CATEGORY A: USER LIFECYCLE AUTOMATIONS

---

### DETAILED AUTOMATION WORKFLOWS

**AUTOMATION 1: New User in New City**
```
TRIGGER: User registers + selects city (e.g., "Buenos Aires")
  ↓
CHECK: Does "Buenos Aires Tango" community exist?
  ├─ YES: Add user to community
  └─ NO: Create new community → Add user as member
  ↓
ACTIONS:
1. Create community group
   - Name: "{City} Tango Community"
   - Description: Auto-generated
   - Initial member: New user
   
2. Add starter content
   - Welcome post from system
   - City guide (if available)
   - Link to local events
   
3. Notify user
   - "Welcome to {City}! We've connected you with local dancers."
   - Email with community link
   
4. Suggest connections
   - Find users in same city
   - Suggest friend requests
   
5. Recommend events
   - Upcoming events in that city
   - Add to discovery feed
```

**AUTOMATION 2: Event RSVP**
```
TRIGGER: User RSVPs to event
  ↓
ACTIONS:
1. Add to user's calendar
   - Extract event date/time/location
   - Create calendar entry
   - Sync with Calendar.Agent (P67)
   
2. Set reminder notifications
   - 24 hours before: "Tomorrow's event reminder"
   - 1 hour before: "Event starts soon! Here's the address"
   - Include directions link
   
3. Share with friends (optional)
   - If user opted in
   - Post to feed: "{User} is attending {Event}"
   - Notify friends who might be interested
   
4. Download event details
   - Add to user's "My Events" list
   - Offline access (PWA)
   - Add to map markers
   
5. Organizer notification
   - Increment RSVP count
   - Update attendance list
   - Send to event organizer
```

**AUTOMATION 3: New Message Received**
```
TRIGGER: User receives new message
  ↓
CHECK: Is user online?
  ├─ YES: Real-time notification (WebSocket)
  │   - Toast notification
  │   - Update unread count
  │   - Sound alert (if enabled)
  │
  └─ NO: Multi-channel notification
      - Push notification (PWA)
      - Email (if >15 min offline)
      - Badge on app icon
  ↓
ACTIONS:
1. Update conversation list
   - Move to top
   - Show preview
   - Mark as unread
   
2. Increment unread count
   - Update badge
   - Update topbar notification
   
3. Smart batching
   - If multiple messages from same person
   - Batch into single notification
   - "3 new messages from Maria"
```

**AUTOMATION 4: Friend Request**
```
TRIGGER: User receives friend request
  ↓
INTELLIGENCE LAYER:
1. Check mutual friends
   - Count shared connections
   - Show in notification
   
2. Check common interests
   - Same cities visited
   - Same events attended
   - Similar dance styles
   
3. Profile analysis
   - Check if profiles complete
   - Detect spam patterns
   - Flag if suspicious
  ↓
ACTIONS:
1. Send notification
   - "{Name} sent you a friend request"
   - Show mutual friends: "You have 3 mutual friends"
   - Quick accept/decline buttons
   
2. Add to pending requests
   - Update Friends page
   - Show in topbar
   
3. Suggest connections
   - If accepted: Suggest more mutual friends
   - "You might also know {Name}"
```

**AUTOMATION 5: Goal Progress Update**
```
TRIGGER: User completes a task (Life CEO)
  ↓
CALCULATIONS:
1. Update goal progress percentage
2. Check if milestone reached
3. Check if goal completed
  ↓
ACTIONS (if milestone):
1. Celebration notification
   - "🎉 You've reached 50% of your goal!"
   - Confetti animation
   - Achievement badge
   
2. Update progress bars
   - All affected dashboards
   - Life CEO page
   - Profile achievements
   
3. Suggest next task
   - AI recommends next action
   - Calendar.Agent schedules it
   - "Ready for your next challenge?"
   
4. Social sharing (optional)
   - "Share your achievement?"
   - Post to feed
   - Motivate community
```

**AUTOMATION 6: Housing Search Match**
```
TRIGGER: User searches for housing
  ↓
SAVE SEARCH:
1. Store search criteria
   - Location, price range, beds
   - Preferences saved
  ↓
BACKGROUND MONITORING:
1. Check new listings daily
   - Match against saved criteria
   
2. Price drop alerts
   - If saved listing price drops
   - "Price dropped $100!"
   
3. New matches
   - Email digest (weekly)
   - Push notifications (urgent matches)
  ↓
AI ENHANCEMENTS:
1. Suggest similar areas
   - "Also check Recoleta (similar price)"
   
2. Predict best time to book
   - Seasonal trends
   - Price predictions
```

**AUTOMATION 7: Volunteer Task Assignment**
```
TRIGGER: Admin approves volunteer task assignment
  ↓
ACTIONS:
1. Notify volunteer
   - Email with task details
   - In-app notification
   - Calendar invite
   
2. Create task in project tracker
   - Agent #65 project tracker
   - Assign to volunteer
   - Set deadline
   
3. Setup GitHub issue (if code task)
   - Auto-create GitHub issue
   - Link to task
   - Add labels
   
4. Onboarding materials
   - Send setup docs
   - Add to Slack/Discord
   - Assign mentor
   
5. Schedule check-in
   - Auto-schedule 1-week check-in
   - Reminder to admin
   - Feedback request
```

**AUTOMATION 8: Event Created**
```
TRIGGER: User/admin creates new event
  ↓
ENRICHMENT:
1. Geocode address
   - Convert to lat/lon
   - Add to map
   - Validate location
   
2. Extract metadata
   - Parse date/time
   - Detect event type
   - Extract keywords
  ↓
PROMOTION:
1. Notify relevant users
   - Users in same city
   - Users who attended similar events
   - Community members
   
2. Add to discovery
   - Featured events carousel
   - "Events near you"
   - Calendar view
   
3. Social sharing
   - Auto-post to Facebook (if integrated)
   - Generate shareable card
   - Track shares
```

---

### n8n WORKFLOW STRUCTURE

**Example: New User in New City Workflow**
```json
{
  "name": "New User City Group Creation",
  "nodes": [
    {
      "type": "webhook",
      "name": "User Registered Webhook",
      "parameters": {
        "path": "user-registered",
        "method": "POST"
      }
    },
    {
      "type": "function",
      "name": "Extract City",
      "parameters": {
        "code": "return { city: items[0].json.user.city };"
      }
    },
    {
      "type": "postgres",
      "name": "Check Community Exists",
      "parameters": {
        "query": "SELECT id FROM communities WHERE name = $1",
        "params": ["{{$node['Extract City'].json.city}} Tango Community"]
      }
    },
    {
      "type": "if",
      "name": "Community Exists?",
      "parameters": {
        "conditions": {
          "rows": "> 0"
        }
      }
    },
    {
      "type": "postgres",
      "name": "Create Community",
      "parameters": {
        "operation": "insert",
        "table": "communities",
        "columns": "name, description, created_by"
      }
    },
    {
      "type": "postgres",
      "name": "Add User to Community",
      "parameters": {
        "operation": "insert",
        "table": "community_members"
      }
    },
    {
      "type": "sendEmail",
      "name": "Welcome Email",
      "parameters": {
        "to": "{{$node['User Registered Webhook'].json.user.email}}",
        "subject": "Welcome to {{$node['Extract City'].json.city}}!",
        "body": "template here"
      }
    }
  ]
}
```

---

=======================================================================
SUMMARY OF ADDITIONS
=======================================================================

## NEW CONTENT ADDED (PARTS 11-15):

**PART 11: Marketing & HR Agents**
- 5 Marketing agents (M1-M5)
- 5 HR/Talent agents (H1-H5)
- Complete agent role descriptions

**PART 12: Marketing Page (P7 Updated)**
- Full MT Platform marketing layout
- Mr Blue AI showcase section
- Talent Match AI integration
- Automation showcase
- Community statistics
- Success stories carousel
- Join CTA section

**PART 13: Talent Match AI / Resume AI (P82)**
- Complete 3-step wizard layout
- Upload resume interface
- AI Clarifier chat interview
- Task recommendation system
- Signal detection algorithm
- Task matching algorithm
- Application flow

**PART 14: H2AC Framework**
- Human-to-Agent Communication system
- Universal agent interface
- Agent router architecture
- Communication patterns
- Context management
- Conversation examples
- UI integration points

**PART 15: Automation Workflows**
- 8 detailed automation workflows:
  1. New user in new city
  2. Event RSVP
  3. Message received
  4. Friend request
  5. Goal progress
  6. Housing match
  7. Task assignment
  8. Event created
- n8n workflow structure
- Complete automation architecture

---

UPDATED TOTALS:
- **Total Pages:** 82+ (was 80+)
- **Total Agents:** 110+ (105 ESA + 5 Marketing + 5 HR agents)
- **Total Lines:** 3,226+ (document continuously growing)
- **New Components:** E160-E175 (marketing & talent match)
- **New AI Agents:** A85-A88 (resume, clarifier, matching)


**AUTOMATION A1: New User Registration Welcome Sequence**
```
TRIGGER: User completes registration
  ↓
IMMEDIATE ACTIONS:
1. Send welcome email
   - Personalized greeting
   - Platform tour link
   - First steps checklist
   
2. Create user profile defaults
   - Set default language (based on location)
   - Initialize privacy settings
   - Create empty calendar
   
3. Assign beginner achievements
   - "Welcome to Mundo Tango" badge
   - Track onboarding progress
   
4. Queue onboarding tips
   - Day 1: "Complete your profile"
   - Day 3: "Join your first community"
   - Day 7: "RSVP to an event"
```

**AUTOMATION A2: New User in New City → Auto-Create City Community** ⭐
```
TRIGGER: User registers + selects city (e.g., "Buenos Aires")
  ↓
CHECK: Does "{City}" community exist?
  ├─ YES:
  │   → Add user to existing community
  │   → Send "Welcome to {City}" notification
  │   → Show 5 most active members
  │   → Recommend upcoming city events
  │
  └─ NO:
      → CREATE NEW COMMUNITY
      → Community name: "{City}" (e.g., "Buenos Aires", "Paris")
      → Description: Auto-generated city guide
      → Add starter content:
         • Welcome post from system
         • City tango history (if available)
         • Popular dance venues
         • Local customs/etiquette
      → Super admin delegates community review to appropriate regional admin
  ↓
FOLLOW-UP ACTIONS:
1. Find other users in same city
   - Suggest 3-5 friend requests
   - "Connect with local dancers"
   
2. Recommend local events
   - Next 5 upcoming events in city
   - Add to discovery feed
   - Highlight beginner-friendly events
   
3. Housing recommendations
   - If city has housing listings
   - Show 3 relevant options
   
4. Trigger city-specific onboarding
   - Email: "{City} Getting Started Guide"
   - Tips for local tango scene
   - Important locations on map
```

**AUTOMATION A3: Profile Completion Nudges**
```
TRIGGER: User registered but profile incomplete
  ↓
SCHEDULE:
Day 1 (immediate):
  - "Add a profile photo to help people recognize you"
  
Day 3 (if photo still missing):
  - Email reminder with benefits
  - "Profiles with photos get 3x more connections"
  
Day 7 (if bio missing):
  - "Tell us about your tango journey"
  - Show example bios
  
COMPLETE PROFILE REWARD:
  - "Profile Complete" achievement
  - Unlock advanced features
  - Show in discovery (increased visibility)
```

**AUTOMATION A4: Inactive User Re-engagement**
```
TRIGGER: User hasn't logged in for 30 days
  ↓
ANALYSIS:
- Check last activity type
- Identify user's main interests
- Find relevant new content
  ↓
ACTIONS:
1. Send personalized email
   - "We missed you! Here's what's new:"
   - 3 new events in their city
   - 2 new community posts
   - 1 friend who joined recently
   
2. Special re-engagement offer
   - "Come back bonus": Free premium feature trial
   - Or: Highlight new platform features
   
3. If no response after 60 days:
   - Final email: "We'd love to have you back"
   - Survey: "Why did you stop using MT?"
   
4. If no login after 90 days:
   - Mark account as inactive
   - Archive non-essential data
   - Keep account for 1 year before deletion notice
```

**AUTOMATION A5: Email Verification Follow-up**
```
TRIGGER: User registered but hasn't verified email
  ↓
SCHEDULE:
Hour 1: Immediate verification email
Hour 6: Reminder email
Day 1: "Don't miss out!" email
Day 3: Final reminder with consequences
  ↓
Day 7: If still not verified
  - Limit account features
  - Cannot post or RSVP
  - Can only browse
  ↓
Day 14: Account suspension warning
  ↓
Day 30: Account flagged for deletion
```

---

### CATEGORY B: SOCIAL AUTOMATIONS

**AUTOMATION B1: Friend Request with Intelligence**
```
TRIGGER: User receives friend request
  ↓
INTELLIGENCE ANALYSIS:
1. Mutual friends detection
   - Count: 0, 1-3, 4-10, 11+
   - Show top 3 mutual connections
   
2. Common interests
   - Same cities visited: +10 relevance
   - Same events attended: +20 relevance
   - Same communities: +15 relevance
   - Similar dance styles: +10 relevance
   
3. Spam detection
   - Profile incomplete: -20
   - Account less than 1 week old: -15
   - Sent >20 requests today: -50 (flag)
   - No mutual friends: -10
   - Generic message: -5
   
4. Profile match scoring
   - Calculate 0-100 compatibility score
  ↓
NOTIFICATION:
"{Name} sent you a friend request"
  ↓
Display:
- Profile photo
- Mutual friends: "You have 3 mutual friends"
- Common interests: "Both attended Tango Festival 2024"
- Relevance score indicator
  ↓
QUICK ACTIONS:
[Accept] [Decline] [View Profile]
  ↓
IF ACCEPTED:
1. Notify sender
2. Add to friends list (both sides)
3. Suggest more mutual friends
   - "You might also know {Name1}, {Name2}"
4. Update social graph
5. Show in activity feed
```

**AUTOMATION B2: New Message Multi-Channel Notification**
```
TRIGGER: User receives new message
  ↓
CHECK 1: Is recipient online?
  ├─ ONLINE (WebSocket connected):
  │   → Real-time toast notification
  │   → Play sound (if enabled)
  │   → Update unread badge immediately
  │   → Vibrate mobile (if PWA + enabled)
  │
  └─ OFFLINE:
      → Check last seen time
      ├─ < 5 minutes ago:
      │   → Push notification only
      │   → Update badge
      │
      ├─ 5-30 minutes ago:
      │   → Push notification
      │   → Update badge
      │   → Queue email (send in 15 min if still unread)
      │
      └─ > 30 minutes ago:
          → Push notification
          → Email notification (immediate)
          → SMS (if critical + enabled)
  ↓
SMART BATCHING:
If multiple messages from same person within 5 minutes:
  - Batch into single notification
  - "Maria sent you 3 messages"
  - Show preview of latest message only
  ↓
READ RECEIPT:
When recipient reads message:
  - WebSocket emit to sender
  - Update message status: "Read"
  - Show timestamp: "Read at 3:45 PM"
  ↓
CONVERSATION PRIORITY:
Update conversation list:
  - Move to top
  - Bold unread count
  - Show last message preview
  - Sort by most recent
```

**AUTOMATION B3: New Post Engagement**
```
TRIGGER: User creates a post
  ↓
IMMEDIATE:
1. Validate content
   - Check for spam/inappropriate content
   - Scan images (if any)
   - Validate links
   
2. Determine visibility
   - Public/Friends/Community
   - Set permissions
   
3. Add to feeds
   - Author's profile
   - Friends' feeds
   - Relevant community feeds
  ↓
SMART NOTIFICATIONS (within 5 minutes):
Notify specific users:
  - If @mentions anyone → immediate notification
  - If tagged in photo → immediate notification
  - If posted in community → notify community admins
  ↓
ENGAGEMENT TRACKING:
When post gets interactions:
  - First reaction: Notify author immediately
  - First comment: Notify author
  - 10+ reactions: "Your post is popular!"
  - 50+ reactions: "Your post is trending!"
  - Comment replies: Notify parent commenter
  ↓
VIRAL BOOST:
If high engagement in first hour:
  - Show in "Trending" section
  - Suggest to more users
  - Increase feed priority
```

**AUTOMATION B4: Birthday & Anniversary Celebrations**
```
TRIGGER: Cron job runs daily at 8 AM
  ↓
CHECK: Today's birthdays & anniversaries
  ↓
FOR EACH USER WITH BIRTHDAY TODAY:
1. Send birthday notification to friends
   - "Wish {Name} a happy birthday!"
   - Quick message button
   
2. Special birthday features
   - Birthday badge on profile (24 hours)
   - Confetti animation on profile visit
   - Free premium feature unlock (24 hours)
   
3. Platform celebration
   - "Happy Birthday!" post from Mr Blue
   - Auto-generated birthday card
   - Memory recap: "Your year on Mundo Tango"
  ↓
FOR TANGO ANNIVERSARIES:
(Date user joined platform):
  - 1 year: "You've been dancing with us for 1 year!"
  - Show stats: posts, events attended, friends made
  - Special "1 Year" achievement badge
  - Share-worthy image card
```

---

### CATEGORY C: EVENT AUTOMATIONS

**AUTOMATION C1: Event RSVP Complete Workflow**
```
TRIGGER: User RSVPs "Going" to event
  ↓
IMMEDIATE ACTIONS:
1. Add to user's calendar
   - Extract date/time from event
   - Create calendar entry with all details
   - Sync with Calendar.Agent (P67)
   - Generate .ics file for download
   
2. Update event attendee list
   - Increment RSVP count
   - Add user to public attendee list (if not private)
   - Update event capacity: "45/50 spots filled"
   
3. Notify event organizer
   - "{Name} is attending {Event}"
   - Update organizer dashboard
   - If milestone: "10 people confirmed!"
  ↓
SCHEDULED NOTIFICATIONS:
1. 7 days before:
   - "Event coming up: {Event} on {Date}"
   - Weather forecast for event location
   - Parking/transport suggestions
   
2. 24 hours before:
   - "Tomorrow: {Event} at {Time}"
   - Final event details
   - Organizer updates (if any)
   - "Who else is going" (show 5 mutual friends)
   
3. 3 hours before:
   - "Event starts soon!"
   - Directions from current location
   - Public transport options
   - Estimated travel time
   
4. 1 hour before:
   - "Starting in 1 hour: {Event}"
   - Exact address with map
   - Organizer contact (if provided)
   - Parking recommendations
  ↓
SOCIAL FEATURES:
1. Share with friends (optional setting)
   - Post to feed: "{User} is attending {Event}"
   - Notify friends who might be interested
   - Suggest carpooling if multiple friends attending
   
2. Event day check-in
   - "Arrived at {Event}?" button
   - Photo sharing prompt
   - Tag other attendees
  ↓
POST-EVENT:
1. Day after event:
   - "How was {Event}?" rating prompt
   - Photo upload invitation
   - Feedback for organizer
   
2. Recommend similar events
   - Based on event type/location
   - "You might also like..."
```

**AUTOMATION C2: Event Reminder Cascade**
```
TRIGGER: Event created + has RSVPs
  ↓
DYNAMIC SCHEDULE CREATION:
For each attendee, create personalized reminder sequence:
  ↓
T-7 days:
  Email: Full event details
  - Date, time, location
  - What to bring
  - Dress code
  - Transportation options
  ↓
T-3 days:
  Push notification: "Event this weekend!"
  - Countdown timer
  - Weather forecast
  - "Invite more friends" CTA
  ↓
T-24 hours:
  Email + Push: "Tomorrow's event"
  - Final details
  - Any organizer updates
  - Cancel/change RSVP option
  ↓
T-3 hours:
  Push notification: "Event starts soon"
  - Live traffic updates
  - Best route from current location
  - ETA calculation
  ↓
T-1 hour:
  Push: "Starting in 1 hour"
  - Turn-by-turn directions
  - Parking options
  - Contact organizer button
  ↓
T-0 (Event start):
  In-app banner: "Event is starting!"
  - Check-in button
  - "I'm here" status
  ↓
T+1 hour after end:
  "How was the event?" prompt
  - 5-star rating
  - Photo upload
  - Review for organizer
  ↓
IF USER CANCELS RSVP:
  - Remove from all schedules
  - Notify organizer
  - Free up spot
  - Suggest alternative events
```

**AUTOMATION C3: Event Capacity & Waitlist Management**
```
TRIGGER: Event reaches capacity
  ↓
ACTIONS:
1. Update event status
   - Mark as "FULL"
   - Show "Waitlist Available" button
   - Hide "RSVP" button
   
2. Notify organizer
   - "Event is full: {Count} attendees"
   - Suggest: "Increase capacity?" button
   - Or: "Enable waitlist?"
  ↓
IF WAITLIST ENABLED:
When user clicks "Join Waitlist":
  - Add to waitlist queue (FIFO)
  - Send confirmation: "You're #5 on waitlist"
  - Set expectation: "We'll notify you if spot opens"
  ↓
WHEN SOMEONE CANCELS RSVP:
  - Spot opens up
  - Get next person from waitlist
  - Send notification:
    "A spot opened for {Event}!"
    "RSVP by {deadline} or spot goes to next person"
  - Give 2-hour window to claim spot
  - If no response: Move to next waitlist person
  ↓
ORGANIZER INCREASES CAPACITY:
  - Auto-RSVP top N waitlist people
  - Notify them: "Good news! Spot confirmed for {Event}"
  - Remove from waitlist
  - Update event attendee list
```

---

### CATEGORY D: LIFE CEO AUTOMATIONS

**AUTOMATION D1: Goal Progress & Milestone Celebrations**
```
TRIGGER: User completes a task (via Life CEO agents)
  ↓
CALCULATIONS:
1. Update goal progress
   - Recalculate percentage
   - Check if milestone reached (25%, 50%, 75%, 100%)
   - Update streak counter
   
2. Check dependencies
   - Other goals affected?
   - Update related tasks
  ↓
IF MILESTONE REACHED:
1. Celebration notification
   - 🎉 "You've reached 50% of your {Goal}!"
   - Confetti animation
   - Progress bar update with glow effect
   - Sound effect (if enabled)
   
2. Achievement badge
   - Create/update badge
   - Add to profile achievements
   - Share option: "Celebrate with friends"
   
3. Motivational message
   - From Mr Blue: "Amazing progress on {Goal}!"
   - Personalized based on goal type
   - Next steps suggestion
  ↓
NEXT TASK SUGGESTION:
1. AI analyzes completed task
2. Recommends logical next step
3. Creates task suggestion:
   - "Ready for your next challenge?"
   - Auto-populate task details
   - Schedule suggestion
   - Difficulty indicator
  ↓
SOCIAL SHARING (OPTIONAL):
User can share:
  - Post to feed: "Reached 50% of my {Goal}!"
  - Auto-generated progress card with stats
  - Friends can like/comment/encourage
  ↓
STREAK TRACKING:
If consecutive days of progress:
  - "5-day streak! Keep going!"
  - Streak badge
  - Double points for next task
```

**AUTOMATION D2: Weekly Life CEO Summary**
```
TRIGGER: Cron job, every Monday 9 AM
  ↓
FOR EACH ACTIVE USER:
Generate personalized weekly summary:
  ↓
COLLECT DATA:
- Past week's completed tasks (by agent)
- Goal progress changes
- New habits formed
- Streaks maintained
- Achievements unlocked
  ↓
GENERATE REPORT:
Email + In-app notification:

"Your Week with Life CEO"
  
📊 Week of {Date Range}
  
✅ Completed: 12 tasks
🎯 Goals updated: 3
🔥 Streaks: 5 active
⭐ Achievements: 2 new

By Agent:
💼 Career: 4 tasks (Resume updated, Applied to 3 jobs)
💰 Finance: 2 tasks (Budget reviewed, Expense logged)
🏋️ Health: 3 tasks (Gym 3x, Meal prep)
📅 Calendar: 15 events managed
... (all 16 agents)

🎯 Next Week Suggestions:
- [Career Agent] Schedule mock interview
- [Health Agent] Try new workout routine
- [Finance Agent] Review investment portfolio

[View Full Dashboard →]
  ↓
INSIGHTS:
- Week-over-week comparison
- "You completed 20% more tasks than last week!"
- Identify patterns
- Suggest improvements
```

**AUTOMATION D3: Habit Tracking & Streak Protection**
```
TRIGGER: Daily at user's preferred time (default: 8 PM)
  ↓
CHECK: Today's habit completion
  ↓
FOR EACH ACTIVE HABIT:
If NOT completed today:
  - Send reminder: "Keep your {Habit} streak alive!"
  - Show current streak: "5 days - don't break it!"
  - Quick complete button
  - Snooze until bedtime option
  ↓
STREAK AT RISK:
If habit not done by 10 PM:
  - Urgent reminder: "1 hour left to maintain streak!"
  - Visual countdown
  - Motivational message
  ↓
IF STREAK BROKEN:
  - Compassionate message: "Streaks can restart"
  - Show previous record: "Your best: 45 days"
  - Restart encouragement
  - Option to set reminder earlier tomorrow
  ↓
IF STREAK MILESTONE:
Every 7, 30, 100, 365 days:
  - Special celebration
  - Achievement badge
  - Share-worthy card
  - Mr Blue congratulation
```

---

### CATEGORY E: HOUSING/TRAVEL AUTOMATIONS

**AUTOMATION E1: Housing Search Alert System**
```
TRIGGER: User performs housing search
  ↓
SAVE SEARCH CRITERIA:
- Location(s)
- Price range
- Bedrooms
- Amenities
- Move-in date
  ↓
BACKGROUND MONITORING:
Daily check (3 AM system time):
  ↓
1. NEW LISTINGS:
   Query database for new listings matching criteria
   If found:
     - Send email digest: "3 new listings match your search"
     - Push notification (if urgent price/location)
     - Show in "Saved Searches" dashboard
     - Highlight new badge
   
2. PRICE DROPS:
   Check saved/favorited listings
   If price decreased:
     - Immediate notification:
       "{Property} dropped to ${new_price} (was ${old_price})"
       "Save ${difference}!"
     - Email alert
     - Mark as "Hot Deal"
   
3. AVAILABILITY CHANGES:
   If previously unavailable now available:
     - Priority notification
     - "Back in stock" alert
   
4. SIMILAR RECOMMENDATIONS:
   ML analysis:
     - Find similar properties user might like
     - Based on viewed/saved history
     - "You might also like..." suggestions
  ↓
WEEKLY DIGEST:
Every Sunday evening:
  - Summary email: "This week in {City} housing"
  - Market trends
  - New listings count
  - Average price changes
  - Recommended actions
  ↓
SMART INSIGHTS:
- "Prices in {Neighborhood} up 5% this month"
- "Best time to book: {Month}"
- "Similar properties booked fast - act soon"
```

**AUTOMATION E2: Travel Planning Assistant**
```
TRIGGER: User searches for events in new city
  ↓
DETECT TRAVEL INTENT:
If city != user's home city:
  - Show travel planning prompt
  - "Planning a trip to {City}?"
  - [Yes, help me plan] [Just browsing]
  ↓
IF YES:
Activate travel planning mode:
  ↓
1. DATES:
   - Extract event dates
   - Suggest arrival/departure
   - "Arrive {Day Before}, Leave {Day After}"
   
2. HOUSING:
   - Auto-search housing in city
   - Filter by event dates
   - Show 5 options near event venue
   - "10 min walk to event"
   
3. OTHER EVENTS:
   - Find other events during stay
   - "While you're in {City}..."
   - Build multi-event itinerary
   
4. TRANSPORTATION:
   - Flight/train suggestions (external links)
   - Local transport guide
   - Airport to city center options
   
5. LOCAL CONTACTS:
   - Find MT users in destination city
   - "Connect with local dancers"
   - Suggest friend requests
   
6. SAVE TRIP:
   - Create trip itinerary
   - Calendar blocks
   - Packing list
   - Cost estimate
  ↓
TRIP REMINDERS:
T-30 days: "Book your trip to {City}"
T-14 days: "Finalize travel plans"
T-7 days: "Trip next week! Here's your itinerary"
T-1 day: "Tomorrow: Depart for {City}"
```

---

### CATEGORY F: ADMIN/SYSTEM AUTOMATIONS

**AUTOMATION F1: Content Moderation Queue**
```
TRIGGER: New content created (post, comment, message, profile update)
  ↓
AUTO-MODERATION (AI):
1. Text analysis
   - Spam detection
   - Profanity filter
   - Hate speech detection
   - Scam/phishing detection
   
2. Image analysis (if present)
   - NSFW detection
   - Violence detection
   - Copyright detection
   
3. Link analysis
   - Malicious link detection
   - Shortened URL expansion
   - Domain reputation check
  ↓
SCORING:
- Clean: 0-20 (auto-approve)
- Suspicious: 21-60 (flag for review)
- Likely violation: 61-100 (auto-hide, immediate review)
  ↓
IF FLAGGED:
1. Add to moderation queue
2. Hide content temporarily
3. Notify moderation team
4. Email admin with details
   - Content preview
   - User history
   - AI confidence score
   - Quick action buttons
  ↓
MODERATOR ACTIONS:
[Approve] → Unhide, mark user as trusted
[Edit & Approve] → Request changes
[Remove] → Delete, warn user
[Ban User] → Permanent removal
  ↓
USER NOTIFICATION:
If removed:
  - "Your {content} was removed"
  - Reason explanation
  - Appeal option
  - Guidelines link
```

**AUTOMATION F2: Platform Health Monitoring**
```
TRIGGER: Cron job every 5 minutes
  ↓
HEALTH CHECKS:
1. API Response Time
   - Ping /health endpoint
   - Measure response time
   - Alert if > 2 seconds
   
2. Database Performance
   - Active connections
   - Slow query detection
   - Deadlock monitoring
   
3. Memory Usage
   - Server RAM usage
   - Alert if > 80%
   
4. Disk Space
   - Storage capacity
   - Alert if < 10% free
   
5. WebSocket Connections
   - Active connections count
   - Connection errors
   
6. Queue Health
   - BullMQ job counts
   - Failed job monitoring
   - Queue latency
  ↓
IF ISSUES DETECTED:
1. Log to monitoring system (Prometheus)
2. Send alert to admin Slack/email
3. Auto-scale if possible
4. Create incident ticket
  ↓
DAILY REPORT:
Email to tech team:
  - Uptime percentage
  - Average response time
  - Error count
  - User activity stats
```

**AUTOMATION F3: Database Backup & Maintenance**
```
TRIGGER: Daily at 3 AM (low traffic time)
  ↓
BACKUP SEQUENCE:
1. Create database snapshot
   - Full backup
   - Store in S3/backup location
   - Retain 30 days
   
2. Verify backup
   - Test restore to staging
   - Validate data integrity
   
3. Cleanup old backups
   - Delete backups > 30 days
   - Keep monthly snapshots for 1 year
  ↓
MAINTENANCE:
1. Vacuum database
   - Reclaim space
   - Update statistics
   
2. Reindex tables
   - Rebuild indexes
   - Optimize query performance
   
3. Clear old logs
   - Delete logs > 90 days
   - Archive important logs
  ↓
REPORT:
Email to admins:
  - Backup status: ✅
  - Backup size: 15 GB
  - Database health: Excellent
  - Issues found: None
```

---


=======================================================================
PART 16: CITY COMMUNITY DESIGN SYSTEM
=======================================================================

## 16.1 CITY COVER PAGE DESIGN - CITYSCAPE PHOTOGRAPHY

Each city community has a **beautiful cityscape cover photo** that represents the city's character.

### Design Requirements

**Cityscape Cover Photo Specifications:**
- **Resolution**: 1920x600px (desktop), responsive down to 768x300px (mobile)
- **Aspect Ratio**: 16:5 (panoramic cityscape)
- **Format**: WebP (with JPG fallback)
- **Quality**: High-resolution professional photography
- **Theme**: Iconic cityscape view showing city's personality
- **Time of Day**: Preferably golden hour (sunset/sunrise) or blue hour
- **Composition**: Wide angle, skyline visible, minimal text overlay

**Image Sources:**
1. **Pexels API**: Free high-quality cityscape photos
2. **Unsplash API**: Curated city photography
3. **Custom uploads**: City admin can upload custom photo
4. **Fallback**: Default gradient with city name

### Implementation

**Database Schema:**
```typescript
export const communities = pgTable("communities", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 255 }).notNull(), // "Buenos Aires"
  cityName: varchar("city_name", { length: 255 }).notNull(), // "Buenos Aires"
  countryCode: varchar("country_code", { length: 2 }), // "AR"
  coverPhotoUrl: text("cover_photo_url"), // Cityscape photo URL
  coverPhotoSource: varchar("cover_photo_source", { length: 50 }), // "pexels", "unsplash", "custom"
  coverPhotoCredit: text("cover_photo_credit"), // Photographer credit
  description: text("description"),
  createdAt: timestamp("created_at").defaultNow(),
});
```

**Auto-Fetch Cityscape on Community Creation:**
```typescript
async function createCityCommunity(cityName: string): Promise<Community> {
  // 1. Try to fetch cityscape photo from Pexels
  const cityscapePhoto = await fetchCityscapePhoto(cityName);
  
  // 2. Create community with photo
  const community = await db.insert(communities).values({
    name: cityName, // e.g., "Buenos Aires"
    cityName: cityName,
    coverPhotoUrl: cityscapePhoto?.url || null,
    coverPhotoSource: cityscapePhoto?.source || null,
    coverPhotoCredit: cityscapePhoto?.credit || null,
    description: `Tango community in ${cityName}. Connect with local dancers, discover events, and share your tango journey.`,
  }).returning();
  
  return community;
}

async function fetchCityscapePhoto(cityName: string): Promise<CityPhoto | null> {
  try {
    // Try Pexels API first
    const pexelsResponse = await fetch(
      `https://api.pexels.com/v1/search?query=${encodeURIComponent(cityName + ' cityscape skyline')}&per_page=5&orientation=landscape`,
      {
        headers: {
          Authorization: process.env.PEXELS_API_KEY!,
        },
      }
    );
    
    const data = await pexelsResponse.json();
    
    if (data.photos && data.photos.length > 0) {
      const photo = data.photos[0];
      return {
        url: photo.src.large2x,
        source: 'pexels',
        credit: `Photo by ${photo.photographer} on Pexels`,
      };
    }
    
    // Fallback to Unsplash
    const unsplashResponse = await fetch(
      `https://api.unsplash.com/search/photos?query=${encodeURIComponent(cityName + ' cityscape')}&per_page=5&orientation=landscape`,
      {
        headers: {
          Authorization: `Client-ID ${process.env.UNSPLASH_ACCESS_KEY}`,
        },
      }
    );
    
    const unsplashData = await unsplashResponse.json();
    
    if (unsplashData.results && unsplashData.results.length > 0) {
      const photo = unsplashData.results[0];
      return {
        url: photo.urls.regular,
        source: 'unsplash',
        credit: `Photo by ${photo.user.name} on Unsplash`,
      };
    }
    
    return null;
  } catch (error) {
    console.error('Error fetching cityscape photo:', error);
    return null;
  }
}
```

**Frontend Display:**
```tsx
function CommunityDetailPage({ community }: { community: Community }) {
  return (
    <div className="community-page">
      {/* City Cityscape Cover */}
      <div className="relative w-full h-[400px] md:h-[600px] overflow-hidden">
        {community.coverPhotoUrl ? (
          <img
            src={community.coverPhotoUrl}
            alt={`${community.cityName} cityscape`}
            className="w-full h-full object-cover"
          />
        ) : (
          <div className="w-full h-full bg-gradient-to-r from-primary to-accent" />
        )}
        
        {/* City Name Overlay */}
        <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-8">
          <h1 className="text-5xl font-bold text-white">{community.cityName}</h1>
          <p className="text-white/90 mt-2">{community.description}</p>
        </div>
        
        {/* Photo Credit */}
        {community.coverPhotoCredit && (
          <div className="absolute top-2 right-2 bg-black/50 px-2 py-1 rounded text-xs text-white/70">
            {community.coverPhotoCredit}
          </div>
        )}
      </div>
      
      {/* Community Content */}
      <div className="container mx-auto py-8">
        {/* Events, members, posts, etc. */}
      </div>
    </div>
  );
}
```

### Example Cities with Cityscapes

**Buenos Aires:**
- Cityscape: Obelisco and Avenida 9 de Julio at sunset
- Colors: Warm golden hour, purple/pink sky
- Mood: Romantic, nostalgic, passionate

**Paris:**
- Cityscape: Eiffel Tower and Seine River at blue hour
- Colors: Cool blues, golden lights
- Mood: Elegant, sophisticated, romantic

**New York:**
- Cityscape: Manhattan skyline from Brooklyn at night
- Colors: Deep blues, bright city lights
- Mood: Vibrant, energetic, dynamic

**Istanbul:**
- Cityscape: Bosphorus Bridge and mosques at sunset
- Colors: Warm oranges, silhouettes
- Mood: Historic, mystical, cultural

**São Paulo:**
- Cityscape: Paulista Avenue skyscrapers at twilight
- Colors: Purple sky, neon lights
- Mood: Modern, bustling, cosmopolitan

---

## 16.2 CITY COMMUNITY AUTO-CREATION LOGIC

### Complete Flow

```
USER REGISTERS → SELECTS CITY → CHECK IF CITY COMMUNITY EXISTS
  │
  ├─ EXISTS: Join existing community
  │
  └─ DOESN'T EXIST:
      1. Create community with city name
      2. Fetch cityscape photo (Pexels/Unsplash)
      3. Generate city description
      4. Add starter welcome post
      5. Add user to community
      6. Notify super admin (for delegation)
      7. Suggest local events
      8. Recommend housing (if available)
```

### Super Admin Delegation System

When new city community is created:

```typescript
async function notifySuperAdminNewCity(community: Community) {
  const superAdmins = await getSuperAdmins();
  
  for (const admin of superAdmins) {
    await createNotification({
      userId: admin.id,
      type: 'new_city_community',
      title: `New City Community: ${community.cityName}`,
      message: `A new community was auto-created for ${community.cityName}. Please review and delegate to a regional admin.`,
      actionUrl: `/admin/communities/${community.id}/delegate`,
      priority: 'medium',
    });
  }
  
  // Also create admin task
  await createAdminTask({
    type: 'delegate_community',
    communityId: community.id,
    cityName: community.cityName,
    status: 'pending',
    dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
  });
}
```

**Delegation UI (Super Admin only):**
```tsx
function DelegateCommunityPage({ community }: { community: Community }) {
  const [selectedAdmin, setSelectedAdmin] = useState<Admin | null>(null);
  const regionalAdmins = useQuery({ queryKey: ['/api/admins/regional'] });
  
  const delegateMutation = useMutation({
    mutationFn: (data: { adminId: number }) => 
      apiRequest('POST', `/api/communities/${community.id}/delegate`, data),
    onSuccess: () => {
      toast({ title: 'Community delegated successfully' });
      navigate('/admin/communities');
    },
  });
  
  return (
    <div className="p-8">
      <h1 className="text-2xl font-bold mb-4">
        Delegate Community: {community.cityName}
      </h1>
      
      <div className="mb-6">
        <img src={community.coverPhotoUrl} alt={community.cityName} className="w-full h-48 object-cover rounded" />
      </div>
      
      <label className="block mb-2">Select Regional Admin:</label>
      <Select onValueChange={(value) => setSelectedAdmin(regionalAdmins.data?.find(a => a.id === Number(value)))}>
        <SelectTrigger>
          <SelectValue placeholder="Choose admin..." />
        </SelectTrigger>
        <SelectContent>
          {regionalAdmins.data?.map((admin) => (
            <SelectItem key={admin.id} value={String(admin.id)}>
              {admin.name} - {admin.region}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      
      <Button
        onClick={() => selectedAdmin && delegateMutation.mutate({ adminId: selectedAdmin.id })}
        disabled={!selectedAdmin || delegateMutation.isPending}
        className="mt-4"
      >
        Delegate to {selectedAdmin?.name}
      </Button>
    </div>
  );
}
```


=======================================================================
PART 17: POST CREATION AUTOMATION (WITH AUTO-CITY CREATION)
=======================================================================

## 17.1 POST CREATION WITH LOCATION-BASED AUTO-CITY DETECTION

### Automation Trigger

When user creates a post WITH location tag:

```
USER CREATES POST → INCLUDES LOCATION (e.g., "Barcelona")
  ↓
AUTOMATION TRIGGERS:
1. Parse location (city name)
2. CHECK: Does city community exist?
   ├─ YES: Suggest posting to city community
   └─ NO: Auto-create city community + suggest posting there
3. Cross-post to user's feed AND city community (if user approves)
4. Recommend other posts from same city
5. Suggest local friends who posted about this city
```

### Implementation

**AUTOMATION B5: Post Creation with Location Intelligence**
```
TRIGGER: User creates post with location tag
  ↓
STEP 1: PARSE LOCATION
Extract city name from location string
  - Input: "Barcelona, Spain" → City: "Barcelona"
  - Input: "Paris 11th arrondissement" → City: "Paris"
  - Input: "Buenos Aires" → City: "Buenos Aires"
  ↓
STEP 2: CHECK CITY COMMUNITY
Query database: Does community with cityName={City} exist?
  ├─ YES:
  │   → Show suggestion: "Post this to {City} community?"
  │   → If user approves: Cross-post to community
  │   → Tag post with city
  │   → Show other {City} posts in sidebar
  │
  └─ NO:
      → AUTO-CREATE CITY COMMUNITY:
         1. Create community: name="{City}"
         2. Fetch cityscape photo (Pexels/Unsplash)
         3. Add starter content
         4. Add user to community
         5. Notify super admin for delegation
      → Show: "We created {City} community! Post there?"
      → If user approves: Cross-post to new community
  ↓
STEP 3: INTELLIGENT RECOMMENDATIONS
Based on post location:
  - Find 3-5 other posts from same city
  - Suggest users who posted about this city
  - Recommend upcoming events in this city
  - Show housing listings in this city (if travel-related post)
  ↓
STEP 4: ENGAGEMENT BOOST
If post mentions city:
  - Show to users who have {City} in their profile
  - Show to users who attended events in {City}
  - Show to users in {City} community
  - Increase feed ranking for local users
```

**Backend Implementation:**
```typescript
// Post creation endpoint with location intelligence
router.post('/api/posts', authenticate, async (req, res) => {
  const { content, mediaUrl, mediaType, location } = req.body;
  
  // Create post
  const post = await db.insert(posts).values({
    userId: req.user!.id,
    content,
    mediaUrl,
    mediaType,
    location,
  }).returning();
  
  // If location provided, trigger automation
  if (location) {
    await automationService.triggerWorkflow('post_creation_with_location', {
      postId: post.id,
      userId: req.user!.id,
      location,
    });
  }
  
  res.json(post);
});

// Automation workflow
class PostLocationAutomation {
  async execute({ postId, userId, location }: WorkflowData) {
    // 1. Parse city from location
    const cityName = await this.parseCity(location);
    if (!cityName) return;
    
    // 2. Check if city community exists
    let community = await db.query.communities.findFirst({
      where: eq(communities.cityName, cityName),
    });
    
    // 3. If not, create it
    if (!community) {
      community = await this.createCityCommunity(cityName);
      
      // Notify super admin
      await this.notifySuperAdminNewCity(community);
    }
    
    // 4. Suggest cross-posting to user
    await this.suggestCommunityPost(userId, postId, community.id);
    
    // 5. Find related content
    const relatedPosts = await this.findRelatedPosts(cityName, postId);
    const relatedUsers = await this.findUsersInCity(cityName, userId);
    
    // 6. Send recommendations
    await this.sendRecommendations(userId, {
      community,
      relatedPosts,
      relatedUsers,
    });
  }
  
  private async parseCity(location: string): Promise<string | null> {
    // Use OpenStreetMap Nominatim for geocoding
    const response = await fetch(
      `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location)}&format=json&limit=1`
    );
    
    const data = await response.json();
    if (data.length === 0) return null;
    
    // Extract city name
    const address = data[0].address;
    return address.city || address.town || address.village || null;
  }
  
  private async createCityCommunity(cityName: string): Promise<Community> {
    // Fetch cityscape photo
    const photo = await fetchCityscapePhoto(cityName);
    
    // Create community
    const [community] = await db.insert(communities).values({
      name: cityName,
      cityName,
      coverPhotoUrl: photo?.url,
      coverPhotoSource: photo?.source,
      coverPhotoCredit: photo?.credit,
      description: `Tango community in ${cityName}. Connect with local dancers, discover events, and share your tango journey.`,
    }).returning();
    
    // Create welcome post
    await db.insert(posts).values({
      userId: 1, // System user
      content: `Welcome to the ${cityName} tango community! 🎵\n\nShare your experiences, find local milongas, and connect with fellow dancers.`,
      communityId: community.id,
    });
    
    return community;
  }
  
  private async suggestCommunityPost(userId: number, postId: number, communityId: number) {
    // Create in-app notification
    await db.insert(notifications).values({
      userId,
      type: 'suggest_community_post',
      title: 'Post to community?',
      message: `Your post mentions a city. Would you like to share it with the community?`,
      actionUrl: `/posts/${postId}/cross-post?communityId=${communityId}`,
      actionLabel: 'Cross-post',
    });
  }
  
  private async findRelatedPosts(cityName: string, excludePostId: number) {
    return await db.query.posts.findMany({
      where: and(
        like(posts.location, `%${cityName}%`),
        ne(posts.id, excludePostId)
      ),
      limit: 5,
      orderBy: [desc(posts.createdAt)],
    });
  }
  
  private async findUsersInCity(cityName: string, excludeUserId: number) {
    return await db.query.users.findMany({
      where: and(
        or(
          like(users.city, `%${cityName}%`),
          like(users.location, `%${cityName}%`)
        ),
        ne(users.id, excludeUserId)
      ),
      limit: 5,
    });
  }
}
```

**Frontend Post Creation Form:**
```tsx
function CreatePostForm() {
  const [content, setContent] = useState('');
  const [location, setLocation] = useState('');
  const [showLocationSuggestion, setShowLocationSuggestion] = useState(false);
  
  const createPostMutation = useMutation({
    mutationFn: (data: { content: string; location?: string }) =>
      apiRequest('POST', '/api/posts', data),
    onSuccess: (post) => {
      queryClient.invalidateQueries({ queryKey: ['/api/feed'] });
      
      // Listen for community suggestion notification
      socket.on('suggest_community_post', (data) => {
        setShowLocationSuggestion(true);
      });
    },
  });
  
  return (
    <form onSubmit={(e) => {
      e.preventDefault();
      createPostMutation.mutate({ content, location });
    }}>
      <Textarea
        value={content}
        onChange={(e) => setContent(e.target.value)}
        placeholder="Share your tango experience..."
        data-testid="input-post-content"
      />
      
      <Input
        value={location}
        onChange={(e) => setLocation(e.target.value)}
        placeholder="Where was this? (optional)"
        data-testid="input-post-location"
      />
      
      <Button type="submit" disabled={!content} data-testid="button-create-post">
        Post
      </Button>
      
      {/* Community suggestion popup */}
      {showLocationSuggestion && (
        <Alert className="mt-4">
          <MapPin className="h-4 w-4" />
          <AlertTitle>Post to {location} community?</AlertTitle>
          <AlertDescription>
            We found a community for this city. Share your post there too?
            <div className="mt-2 flex gap-2">
              <Button size="sm" onClick={() => crossPostToCommunity()}>
                Yes, share
              </Button>
              <Button size="sm" variant="outline" onClick={() => setShowLocationSuggestion(false)}>
                No thanks
              </Button>
            </div>
          </AlertDescription>
        </Alert>
      )}
    </form>
  );
}
```


=======================================================================
PART 18: PLATFORM ALGORITHMS (A1-A50)
=======================================================================

## 18.1 ALGORITHM OVERVIEW

The platform uses 50+ specialized algorithms for intelligent features:
- Feed ranking & recommendations
- Search relevance
- ML predictions (churn, engagement, journeys)
- Optimization (cost, performance, caching)
- Security (anomaly, fraud, spam detection)

**Source**: Complete documentation in `docs/handoff/HANDOFF_34_ALGORITHM_AGENTS_COMPLETE.txt`

---

## 18.2 CRITICAL ALGORITHMS

### A1: Feed Ranking Algorithm

**Purpose**: Rank posts in user's home feed for optimal engagement

**Algorithm Type**: Hybrid (collaborative filtering + content-based + temporal)

**Ranking Formula:**
```typescript
finalScore = (recencyScore × 0.4) + (socialScore × 0.3) + (engagementScore × 0.2) + (qualityScore × 0.1)
```

**Factors:**
1. **Recency** (40%): Exponential decay, fresh posts score higher
2. **Social** (30%): Friends, mutual connections, previous interactions
3. **Engagement** (20%): ML prediction of likelihood to interact
4. **Quality** (10%): Has media, content length, spelling

---

### A2: Trending Content Detection

**Purpose**: Identify viral posts and trending topics

**Viral Coefficient:**
```typescript
viralCoefficient = currentEngagement / baselineEngagement
// > 5 = viral
// > 10 = super viral
```

**Trending Topics**: Extract hashtags + Named Entity Recognition (NER) with time decay weighting

---

### A3: Content Recommendation Engine

**Algorithm**: Matrix Factorization (SVD) + Collaborative Filtering

**Process:**
1. Build User×Item interaction matrix
2. Decompose with SVD (50 latent factors)
3. Predict missing ratings
4. Recommend top N uninteracted items

**Use Cases:**
- Post recommendations
- Event recommendations
- User suggestions ("People you may know")

---

### A12: Search Relevance Ranking

**Algorithm**: BM25 + Learning to Rank (Gradient Boosted Trees)

**BM25 Scoring:**
```
score = Σ IDF(term) × (termFreq × (k1 + 1)) / (termFreq + k1 × (1 - b + b × (docLength / avgDocLength)))
```

**Learning Features:**
- Text relevance (BM25, exact match, title match)
- Document quality (engagement, author reputation)
- Personalization (user interaction history, friend engagement)

---

### A25: User Journey Prediction

**Algorithm**: Markov Chain + LSTM Neural Network

**Markov Chain**: Transition probabilities between pages
**LSTM**: Sequence prediction for longer journeys (predicts next 3 pages)

**Used For:**
- Agent #68 (Pattern Learning)
- Pre-loading likely next pages
- Smart navigation suggestions

---

### A28: Anomaly Detection

**Algorithm**: Isolation Forest + Statistical Outliers

**Features Monitored:**
- Posts per hour
- Friend requests per day
- Messages sent per hour
- Unique IPs used
- Session duration
- Click rate

**Output**: Anomaly score (< -0.5 = anomaly) → flag for review

**Use Cases:**
- Spam detection
- Fraud prevention
- Bot identification

---

### A35: AI Cost Optimization

**Algorithm**: Multi-Armed Bandit (Thompson Sampling)

**Purpose**: Select cheapest AI model while maintaining quality

**Models Compared:**
- Groq Llama: $0.0001/1K tokens, 500ms latency, 85% quality
- GPT-4o: $0.005/1K tokens, 2000ms latency, 95% quality
- Claude Sonnet: $0.003/1K tokens, 1500ms latency, 92% quality
- Gemini Flash: $0.00005/1K tokens, 400ms latency, 80% quality

**Selection**: Thompson Sampling from Beta distribution, weighted by cost×latency

---

## 18.3 COMPLETE ALGORITHM INDEX

### Feed & Content (A1-A10)
- A1: Feed Ranking Algorithm ⭐
- A2: Trending Content Detection ⭐
- A3: Content Recommendation Engine ⭐
- A4: Similar Post Finder
- A5: User Recommendation
- A6: Event Recommendation
- A7: Content Diversity Optimizer
- A8: Spam Detection
- A9: Content Moderation AI
- A10: Quality Score Calculator

### Search (A11-A15)
- A11: Query Understanding
- A12: Search Relevance Ranking ⭐
- A13: Autocomplete Suggestions
- A14: Typo Correction
- A15: Semantic Search

### ML & Prediction (A21-A30)
- A21: Click-Through Rate Prediction
- A22: Churn Prediction
- A23: Lifetime Value Prediction
- A24: Engagement Prediction
- A25: User Journey Prediction ⭐ (Agent #68)
- A26: Sentiment Analysis
- A27: Topic Modeling
- A28: Anomaly Detection ⭐
- A29: Fraud Detection
- A30: Bot Detection

### Optimization (A31-A40)
- A31: Database Query Optimizer
- A32: Cache Strategy Optimizer
- A33: Bundle Size Optimizer
- A34: Image Compression Optimizer
- A35: Cost Optimization (AI) ⭐
- A36: Load Balancing Algorithm
- A37: Rate Limiting Algorithm
- A38: A/B Test Allocation
- A39: Resource Allocation
- A40: Performance Tuning

### Specialized (A41-A50)
- A41: Translation Quality Scorer
- A42: Accessibility Checker
- A43: SEO Optimizer
- A44: Performance Score Calculator
- A45: Security Threat Analyzer
- A46: Data Pipeline Scheduler
- A47: Backup Strategy Optimizer
- A48: Scaling Decision Algorithm
- A49: Monitoring Alert Prioritizer
- A50: System Health Scorer

---

## 18.4 ALGORITHM IMPLEMENTATION EXAMPLE

**Talent Match Signal Detection Algorithm** (used in P82):

```typescript
interface ResumeSignal {
  skill: string;
  yearsExperience: number;
  proficiency: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  context: string[];
}

function detectSkillSignals(resumeText: string): ResumeSignal[] {
  const signals: ResumeSignal[] = [];
  
  // 1. Extract skills using NLP
  const skills = extractSkillsNLP(resumeText);
  
  // 2. For each skill, detect proficiency signals
  for (const skill of skills) {
    const context = findSkillContext(resumeText, skill);
    const years = extractYearsExperience(context);
    const proficiency = determineProficiency(context, years);
    
    signals.push({
      skill,
      yearsExperience: years,
      proficiency,
      context,
    });
  }
  
  return signals;
}

function matchSkillToTasks(signals: ResumeSignal[]): Task[] {
  const tasks: Task[] = [];
  
  for (const signal of signals) {
    // Query tasks requiring this skill
    const matchingTasks = db.query.volunteerTasks.findMany({
      where: and(
        arrayContains(volunteerTasks.requiredSkills, [signal.skill]),
        lte(volunteerTasks.requiredYears, signal.yearsExperience)
      ),
    });
    
    // Score match quality
    const scoredTasks = matchingTasks.map(task => ({
      task,
      matchScore: calculateMatchScore(signal, task),
    }));
    
    tasks.push(...scoredTasks.filter(t => t.matchScore > 0.7).map(t => t.task));
  }
  
  // Deduplicate and sort by match score
  return tasks.sort((a, b) => b.matchScore - a.matchScore).slice(0, 10);
}
```


=======================================================================
PART 19: COMPLETE IMPLEMENTATION GUIDE - 0 TO DEPLOYMENT
=======================================================================

## 19.1 OVERVIEW: BUILD STRATEGY

**Goal**: Recreate 100% of Mundo Tango platform from scratch to production deployment

**Approach**: 3-Phase Build Strategy
- **Phase 1**: Foundation (Days 1-2) - Core infrastructure
- **Phase 2**: Features (Days 3-5) - All platform features
- **Phase 3**: Polish & Deploy (Days 6-7) - Testing, optimization, deployment

**Master Reference**: `HANDOFF_MASTER_COMPLETE.txt` (718KB, all 52+ guides)
**Execution Plan**: `EXECUTION_PLAN_COMPLETE_UNIFIED_V5.txt` (V5.0 latest)

---

=======================================================================
## 19.2 PREREQUISITES - BEFORE YOU START
=======================================================================

### Required Accounts

**Development Platform:**
- [ ] Replit account (for initial build)
- [ ] GitHub account (version control)

**Production Hosting:**
- [ ] Vercel account (frontend hosting)
- [ ] Railway account (backend + database)

**Third-Party Services:**
- [ ] Neon/Supabase (PostgreSQL database)
- [ ] Stripe account (payments)
- [ ] Cloudinary account (media storage)
- [ ] Pexels API key (cityscape photos)
- [ ] Unsplash API key (cityscape photos fallback)

**AI Services (at least 2 required):**
- [ ] Groq API key (ultra-fast chat - FREE tier)
- [ ] OpenRouter API key (100+ models - FREE tier)
- [ ] OpenAI API key (GPT-4o code generation)
- [ ] Anthropic API key (Claude Sonnet reasoning)

**Monitoring (optional but recommended):**
- [ ] Sentry account (error tracking)
- [ ] Plausible Analytics account (privacy-first analytics)

### Required Knowledge

**Essential:**
- TypeScript/JavaScript fundamentals
- React hooks & components
- REST API concepts
- PostgreSQL/SQL basics
- Git version control

**Helpful:**
- Drizzle ORM
- React Query
- Socket.io
- Node.js/Express
- Tailwind CSS

---

=======================================================================
## 19.3 PHASE 1: FOUNDATION (DAYS 1-2)
=======================================================================

### DAY 1 MORNING: Environment Setup (2-3 hours)

**STEP 1.1: Create Replit Project**
```bash
# 1. Go to replit.com
# 2. Create new Repl: "Mundo Tango Platform"
# 3. Template: Node.js
# 4. Initialize project structure
```

**STEP 1.2: Install Core Dependencies**
```bash
# Use packager tool or npm
npm install express
npm install drizzle-orm pg
npm install react react-dom
npm install @tanstack/react-query
npm install zod
npm install jsonwebtoken bcrypt
npm install socket.io socket.io-client
npm install stripe
npm install resend
npm install ioredis bullmq
npm install wouter
npm install @radix-ui/react-dialog
npm install lucide-react
npm install tailwindcss
```

**STEP 1.3: Set Up Environment Variables**

Create `.env` file with all secrets:
```bash
# Database
DATABASE_URL=postgresql://user:pass@host:5432/db

# AI Services (get at least 2)
GROQ_API_KEY=your_groq_key
OPENROUTER_API_KEY=your_openrouter_key
OPENAI_API_KEY=your_openai_key
ANTHROPIC_API_KEY=your_anthropic_key

# Payments
STRIPE_SECRET_KEY=your_stripe_secret
STRIPE_PUBLISHABLE_KEY=your_stripe_publishable

# Media
CLOUDINARY_CLOUD_NAME=your_cloud
CLOUDINARY_API_KEY=your_key
CLOUDINARY_API_SECRET=your_secret
PEXELS_API_KEY=your_pexels_key
UNSPLASH_ACCESS_KEY=your_unsplash_key

# Email
RESEND_API_KEY=your_resend_key

# Redis (for BullMQ)
REDIS_URL=redis://localhost:6379

# App
JWT_SECRET=your_random_secret_256_bits
SESSION_SECRET=your_session_secret
NODE_ENV=development
```

**STEP 1.4: Create Project Structure**
```bash
mkdir -p server/{services,routes,workers,middleware}
mkdir -p server/services/{ai,automation,email}
mkdir -p client/src/{components,pages,lib,hooks}
mkdir -p client/src/components/{ui,mrBlue}
mkdir -p shared
mkdir -p docs/handoff
```

---

### DAY 1 AFTERNOON: Database & Schema (3-4 hours)

**STEP 2.1: Create Database Schema** (`shared/schema.ts`)

Reference: `HANDOFF_02_CORE_PLATFORM_COMPLETE.txt` (5,621 lines of schema)

**Start with core tables (implement in this order):**

1. **Users table** (authentication foundation):
```typescript
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  email: varchar("email", { length: 255 }).unique().notNull(),
  password: text("password").notNull(),
  name: varchar("name", { length: 255 }).notNull(),
  username: varchar("username", { length: 50 }).unique().notNull(),
  city: varchar("city", { length: 100 }),
  profileImage: text("profile_image"),
  createdAt: timestamp("created_at").defaultNow(),
});

export const insertUserSchema = createInsertSchema(users).omit({
  id: true,
  createdAt: true,
});

export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;
```

2. **Posts table** (social foundation):
```typescript
export const posts = pgTable("posts", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id).notNull(),
  content: text("content").notNull(),
  mediaUrl: text("media_url"),
  location: varchar("location", { length: 255 }),
  communityId: integer("community_id").references(() => communities.id),
  createdAt: timestamp("created_at").defaultNow(),
});
```

3. **Communities table** (city communities):
```typescript
export const communities = pgTable("communities", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 255 }).notNull(),
  cityName: varchar("city_name", { length: 255 }).notNull(),
  coverPhotoUrl: text("cover_photo_url"),
  coverPhotoSource: varchar("cover_photo_source", { length: 50 }),
  coverPhotoCredit: text("cover_photo_credit"),
  description: text("description"),
  createdAt: timestamp("created_at").defaultNow(),
});
```

4. **Events table**:
```typescript
export const events = pgTable("events", {
  id: serial("id").primaryKey(),
  organizerId: integer("organizer_id").references(() => users.id).notNull(),
  communityId: integer("community_id").references(() => communities.id),
  name: varchar("name", { length: 255 }).notNull(),
  description: text("description"),
  location: varchar("location", { length: 255 }),
  startDate: timestamp("start_date").notNull(),
  endDate: timestamp("end_date"),
  capacity: integer("capacity"),
  createdAt: timestamp("created_at").defaultNow(),
});
```

**Continue with remaining 40+ tables** (see HANDOFF_02 for complete schema)

**STEP 2.2: Push Schema to Database**
```bash
npm run db:push
# If warnings appear:
npm run db:push --force
```

**STEP 2.3: Verify Database**
```bash
# Use Drizzle Studio
npm run db:studio
# Or connect with psql
psql $DATABASE_URL
\dt  # List all tables
```

---

### DAY 2 MORNING: Core API Routes (3-4 hours)

**STEP 3.1: Authentication System** (`server/routes/authRoutes.ts`)

```typescript
import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { db } from '../db';
import { users, insertUserSchema } from '@shared/schema';

const router = express.Router();

// Register
router.post('/register', async (req, res) => {
  const validation = insertUserSchema.safeParse(req.body);
  if (!validation.success) {
    return res.status(400).json({ error: validation.error });
  }
  
  const hashedPassword = await bcrypt.hash(validation.data.password, 10);
  
  const [user] = await db.insert(users).values({
    ...validation.data,
    password: hashedPassword,
  }).returning();
  
  const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET!);
  res.json({ user, token });
});

// Login
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  
  const user = await db.query.users.findFirst({
    where: eq(users.email, email),
  });
  
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(401).json({ error: 'Invalid credentials' });
  }
  
  const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET!);
  res.json({ user, token });
});

export default router;
```

**STEP 3.2: Core CRUD Routes**

Implement routes for:
- [ ] `/api/posts` - Create, read, update, delete posts
- [ ] `/api/communities` - Community management
- [ ] `/api/events` - Event CRUD
- [ ] `/api/users/:id` - User profiles
- [ ] `/api/feed` - Feed endpoint with pagination

Reference: `HANDOFF_07_API_REFERENCE_COMPLETE.txt` (100+ endpoints)

---

### DAY 2 AFTERNOON: Frontend Foundation (3-4 hours)

**STEP 4.1: Create MT Ocean Theme** (`client/src/index.css`)

Reference: `HANDOFF_04_DESIGN_SYSTEM_COMPLETE.txt` (829 lines)

**Minimal theme (expand later):**
```css
:root {
  /* MT Ocean Core Colors (HSL format) */
  --primary: 180 75% 45%;        /* Turquoise */
  --secondary: 200 80% 50%;      /* Ocean Blue */
  --accent: 220 85% 55%;         /* Deep Blue */
  
  /* Glassmorphic */
  --glass-bg: rgba(255, 255, 255, 0.1);
  --glass-border: rgba(255, 255, 255, 0.18);
  --glass-blur: 10px;
}

.glass {
  background: var(--glass-bg);
  backdrop-filter: blur(var(--glass-blur));
  border: 1px solid var(--glass-border);
}
```

**STEP 4.2: Create Core Pages**

1. **Login Page** (`client/src/pages/LoginPage.tsx`):
```tsx
import { useForm } from 'react-hook-form';
import { useMutation } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';

export default function LoginPage() {
  const form = useForm();
  
  const loginMutation = useMutation({
    mutationFn: (data: any) => apiRequest('POST', '/api/auth/login', data),
    onSuccess: (data) => {
      localStorage.setItem('token', data.token);
      window.location.href = '/feed';
    },
  });
  
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-primary to-accent">
      <form onSubmit={form.handleSubmit((data) => loginMutation.mutate(data))}>
        <input {...form.register('email')} placeholder="Email" />
        <input {...form.register('password')} type="password" placeholder="Password" />
        <button type="submit">Login</button>
      </form>
    </div>
  );
}
```

2. **Feed Page** (`client/src/pages/FeedPage.tsx`):
```tsx
import { useQuery } from '@tanstack/react-query';

export default function FeedPage() {
  const { data: posts, isLoading } = useQuery({
    queryKey: ['/api/feed'],
  });
  
  if (isLoading) return <div>Loading...</div>;
  
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-6">Your Feed</h1>
      {posts?.map((post: any) => (
        <div key={post.id} className="glass p-4 rounded-lg mb-4">
          <p>{post.content}</p>
        </div>
      ))}
    </div>
  );
}
```

**STEP 4.3: Set Up Routing** (`client/src/App.tsx`):
```tsx
import { Route, Switch } from 'wouter';
import LoginPage from './pages/LoginPage';
import FeedPage from './pages/FeedPage';

export default function App() {
  return (
    <Switch>
      <Route path="/" component={LoginPage} />
      <Route path="/feed" component={FeedPage} />
    </Switch>
  );
}
```

---

=======================================================================
## 19.4 PHASE 2: FEATURES (DAYS 3-5)
=======================================================================

### DAY 3: Social Features

**Build simultaneously (parallel execution):**

1. **Post Creation** (2 hours)
   - Create post form with location field
   - Implement post creation automation (Part 17)
   - Auto-city detection and creation

2. **Communities** (2 hours)
   - Community detail page with cityscape cover
   - Auto-fetch cityscape photos (Pexels/Unsplash)
   - Community member management

3. **Events** (2 hours)
   - Event creation form
   - Event RSVP system
   - Calendar integration

4. **Messaging** (2 hours)
   - Real-time messaging with Socket.io
   - Message notifications
   - Conversation list

---

### DAY 4: AI & Advanced Features

**Build simultaneously:**

1. **Mr Blue AI Chat** (3 hours)
   - Reference: `HANDOFF_01_AI_INTELLIGENCE_COMPLETE.txt`
   - Implement UnifiedAIOrchestrator
   - Create MrBlueComplete.tsx component
   - Add floating chat button

2. **Visual Editor** (2 hours)
   - Integrate GrapesJS
   - AI code generation with GPT-4o
   - Cost tracking display

3. **Life CEO Agents** (3 hours)
   - Create 16 agent pages (P65-P81)
   - Implement goal tracking
   - Task management system

---

### DAY 5: Automations & Polish

**Build simultaneously:**

1. **In-House Automation System** (3 hours)
   - Set up BullMQ queues
   - Implement 20+ automation workflows (Part 15)
   - Create workers for:
     - Email sending
     - Notifications
     - City creation
     - Post recommendations

2. **Search & Recommendations** (2 hours)
   - Implement A1 (Feed Ranking Algorithm)
   - Implement A12 (Search Relevance)
   - Content recommendation engine

3. **Housing & Travel** (2 hours)
   - Housing listings page
   - Map integration (Leaflet.js)
   - Travel planning automation

---

=======================================================================
## 19.5 PHASE 3: POLISH & DEPLOY (DAYS 6-7)
=======================================================================

### DAY 6: Testing & Optimization

**Morning: Testing (3-4 hours)**

1. **Manual Testing Checklist:**
   - [ ] User registration & login
   - [ ] Post creation with location → auto-city creation
   - [ ] Community cityscape photos loading
   - [ ] Event RSVP → calendar sync → reminders
   - [ ] Real-time messaging
   - [ ] Mr Blue AI chat responds
   - [ ] All 82+ pages load correctly

2. **Automated Tests** (optional):
   - Write Playwright tests for critical flows
   - Test API endpoints with Postman/Insomnia

**Afternoon: Optimization (3-4 hours)**

1. **Performance:**
   - [ ] Enable database connection pooling
   - [ ] Add Redis caching for feed
   - [ ] Optimize images (WebP format)
   - [ ] Implement lazy loading

2. **Security:**
   - [ ] Enable CSRF protection
   - [ ] Add rate limiting
   - [ ] Validate all inputs with Zod
   - [ ] Secure API keys in environment

---

### DAY 7: DEPLOYMENT

**STEP 1: Prepare for Production**

```bash
# 1. Build frontend
npm run build

# 2. Test production build locally
npm run preview

# 3. Run database migration on production DB
DATABASE_URL=production_url npm run db:push
```

**STEP 2: Deploy to Vercel (Frontend)**

```bash
# Install Vercel CLI
npm install -g vercel

# Login
vercel login

# Deploy
vercel --prod

# Set environment variables in Vercel dashboard
# - VITE_API_URL=https://your-backend.railway.app
# - All VITE_ prefixed vars
```

**STEP 3: Deploy to Railway (Backend + DB)**

```bash
# 1. Install Railway CLI
npm install -g @railway/cli

# 2. Login
railway login

# 3. Initialize project
railway init

# 4. Add PostgreSQL database
railway add postgresql

# 5. Set environment variables
railway variables set DATABASE_URL=$RAILWAY_DATABASE_URL
railway variables set JWT_SECRET=your_secret
# ... all other env vars

# 6. Deploy
railway up
```

**STEP 4: Configure Domain & SSL**

1. In Vercel: Add custom domain
2. In Railway: Enable public networking
3. Update CORS settings to allow frontend domain

**STEP 5: Post-Deployment Checklist**

- [ ] Test all core features on production
- [ ] Set up monitoring (Sentry)
- [ ] Configure automated backups
- [ ] Enable analytics (Plausible)
- [ ] Document admin access
- [ ] Create first super admin user
- [ ] Test payment flows with Stripe test mode

---

=======================================================================
## 19.6 IMPLEMENTATION TIPS - MB.MD METHODOLOGY
=======================================================================

### Parallel Execution Strategy

**Instead of sequential:**
```
❌ Build Login → Build Register → Build Feed → Build Posts...
   (7 days, one at a time)
```

**Use MB.MD parallel:**
```
✅ SIMULTANEOUSLY build Login + Register + Feed + Posts
   (2 days, all at once)
```

**How to execute MB.MD:**

1. **Identify independent tasks:**
   - Login page (no dependencies)
   - Register page (no dependencies)
   - Feed page (depends on API route)
   - Post creation (depends on schema)

2. **Group by dependencies:**
   - Group 1: Schema → API routes (sequential)
   - Group 2: All frontend pages (parallel)
   - Group 3: All automations (parallel)

3. **Execute in waves:**
   - Wave 1: Create all database tables simultaneously
   - Wave 2: Create all API routes simultaneously
   - Wave 3: Create all frontend pages simultaneously

### Critical Path Identification

**Must be sequential:**
1. Database schema → API routes → Frontend
2. Authentication → Protected routes → User features

**Can be parallel:**
1. All 82 pages (independent layouts)
2. All 20 automations (independent workflows)
3. All 16 Life CEO agent pages (same pattern)
4. All city community covers (same API)

### Debugging Strategy

**When something breaks:**

1. **Check logs:**
   ```bash
   # Backend logs
   npm run dev
   
   # Database logs
   psql $DATABASE_URL
   SELECT * FROM pg_stat_activity;
   ```

2. **Isolate the issue:**
   - Test API endpoint with curl/Postman
   - Check network tab in browser DevTools
   - Verify environment variables

3. **Fix recursively:**
   - Fix root cause, not symptoms
   - Update all similar patterns
   - Document the fix

---

=======================================================================
## 19.7 REFERENCE DOCUMENTS BY TASK
=======================================================================

**When implementing X, read Y:**

| Task | Document | Size |
|------|----------|------|
| Database schema | HANDOFF_02_CORE_PLATFORM_COMPLETE.txt | 35KB |
| AI integration | HANDOFF_01_AI_INTELLIGENCE_COMPLETE.txt | 54KB |
| Frontend components | HANDOFF_03_FRONTEND_SYSTEMS_COMPLETE.txt | 31KB |
| Design system | HANDOFF_04_DESIGN_SYSTEM_COMPLETE.txt | 33KB |
| All pages | COMPLETE_PAGE_LAYOUT_REPORT.txt | 236KB |
| Algorithms | HANDOFF_34_ALGORITHM_AGENTS_COMPLETE.txt | 15KB |
| Automations | Part 15 of this document | - |
| City design | Part 16 of this document | - |
| Post automation | Part 17 of this document | - |
| Everything | HANDOFF_MASTER_COMPLETE.txt | 718KB |

---

=======================================================================
## 19.8 TROUBLESHOOTING COMMON ISSUES
=======================================================================

**Issue: Database migration fails**
```bash
# Solution: Force push
npm run db:push --force
```

**Issue: AI API not responding**
```typescript
// Solution: Check fallback chain in UnifiedAIOrchestrator
// Groq → Gemini → OpenRouter
// Make sure at least 2 API keys are set
```

**Issue: Cityscape photos not loading**
```typescript
// Solution: Verify Pexels/Unsplash API keys
console.log(process.env.PEXELS_API_KEY); // Should not be undefined
```

**Issue: Real-time messages not working**
```typescript
// Solution: Check Socket.io connection
// Backend: Make sure Socket.io server is running
// Frontend: Verify socket URL matches backend
```

**Issue: Automations not triggering**
```bash
# Solution: Check BullMQ workers are running
# Start workers manually if needed
node server/workers/automationWorker.js
```

---

=======================================================================
END OF IMPLEMENTATION GUIDE
=======================================================================

